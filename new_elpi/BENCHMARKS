commit 65fa36e595a7f9131b6e050ea80ff74939747645
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Fri May 8 17:07:06 2015 +0200

    The polymorphic version of Pervasive.compare and min are sloooow!
    
    Explicit typing + replacing min with an if-then-else seems to speed up
    things a lot (like 4% faster according to perf).

commit 760c93d1dac0ee8b85e25360cbe043e7db25b4a2
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Fri May 8 01:17:54 2015 +0200

    Tentative commit: Struct/CLam removed.
    
    A boolean is used in unif to remember if the second input is in the
    heap. The code seems to run 1% slower after a few optimizations.

commit 7a0a17daa1b1fe314cc8bff7dcf749edd492ccf7
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Thu May 7 21:53:28 2015 +0200

    App/Lam used in stack_term_of_ when appropriate.
    
    It does not seem to speed up things.

commit 96c87b14957e9cd5b3643026766e9a93d5fe2a73
Author: Enrico Tassi <gares@fettunta.org>
Date:   Thu May 7 17:54:55 2015 +0200

    more make power

commit 418410204a7334ad4b106242f020e2a7baad3695
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Thu May 7 17:20:41 2015 +0200

    Added examples of usage.

commit c26e97efdc5865ef8ca98051fdf02a3c789eda95
Author: Enrico Tassi <gares@fettunta.org>
Date:   Thu May 7 16:42:59 2015 +0200

    simple bench system
    
    for each runner/$r
    runs all jobs in in jobs/$r*/$result/*
    with $result in: ok ko
    
    jobs are in the end symlinks to sources/, so adding a test
    for a runner is just adding a symlink.
    
    the newelpi runner accepts jobs like newelpi-implX and calls
    newelpi with the right impl
    the teyjus runner compiles and runs with tjsim, embeded in the sources
    to ease testing
    the elpi runner runs with elpi
    
    timeout is 10s
    
    each runners/$r has its preferred stack size in runners/$r.ulimit
    
    output is in CSV, no visualization yet.
    
    result,job,time-as-measured-by-elpi,wall-clock,user-time,memory
    ---------------------------------------------------------------
    OK,jobs/elpi/ok/rev14.elpi,6.073,0:06.11,5.94,887628k,
    OK,jobs/newelpi-impl1/ok/rev14.elpi,2.999,0:03.01,2.90,409288k,
    OK,jobs/newelpi-impl10/ok/rev14.elpi,0.348,0:00.34,0.33,44784k,
    OK,jobs/newelpi-impl11/ok/rev14.elpi,0.354,0:00.35,0.34,36460k,
    OK,jobs/newelpi-impl12/ok/rev14.elpi,1.205,0:01.21,1.16,189184k,
    OK,jobs/newelpi-impl13/ok/rev14.elpi,0.871,0:00.87,0.82,143740k,
    OK,jobs/newelpi-impl14/ok/rev14.elpi,0.743,0:00.74,0.72,107080k,
    OK,jobs/newelpi-impl15/ok/rev14.elpi,0.167,0:00.16,0.15,28692k,
    OK,jobs/newelpi-impl16/ok/rev14.elpi,0.142,0:00.14,0.14,22400k,
    OK,jobs/newelpi-impl16/ok/rev15.elpi,0.270,0:00.27,0.27,39956k,
    OK,jobs/newelpi-impl16/ok/rev16.elpi,0.543,0:00.54,0.52,74348k,
    OK,jobs/newelpi-impl16/ok/rev17.elpi,1.079,0:01.08,1.04,141184k,
    OK,jobs/newelpi-impl16/ok/rev18.elpi,2.151,0:02.16,2.09,280676k,
    OK,jobs/newelpi-impl2/ok/rev14.elpi,2.822,0:02.84,2.73,364084k,
    OK,jobs/newelpi-impl3/ok/rev14.elpi,1.733,0:01.73,1.71,81076k,
    OK,jobs/newelpi-impl4/ok/rev14.elpi,4.099,0:04.12,3.98,439572k,
    KO,jobs/newelpi-impl5/ok/rev14.elpi,10.00,0:10.00,10.00,0k
    KO,jobs/newelpi-impl6/ok/rev14.elpi,10.00,0:10.00,10.00,0k
    KO,jobs/newelpi-impl7/ok/rev14.elpi,10.00,0:10.00,10.00,0k
    OK,jobs/newelpi-impl8/ok/rev14.elpi,2.930,0:02.94,2.88,364292k,
    OK,jobs/newelpi-impl9/ok/rev14.elpi,0.803,0:00.81,0.78,138088k,
    OK,jobs/teyjus/ok/rev14,?,0:00.17,0.16,39756k,

commit 0b6cfe82cb0918c9b117e032ec648c28b70667ff
Author: Enrico Tassi <gares@fettunta.org>
Date:   Thu May 7 16:17:42 2015 +0200

    newelpi: -test <impl> option

commit afc30cc7370d678aac6e21ccb7b4b524e228f6ea
Author: Enrico Tassi <gares@fettunta.org>
Date:   Thu May 7 16:17:23 2015 +0200

    elpi: -goal option

commit 0eba07c7e4dd01c45dbcc198f7f95865f70858d9
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Thu May 7 13:57:20 2015 +0200

    Restrict optimized.
    
    New optimization for the generalized Prolog case of restrict.
    This saves some more.

commit 92970995a4cd86940ebf96b197248445ccfc6b6a
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Thu May 7 11:11:13 2015 +0200

    full_deref optimized to recognize the Prolog-like case.
    
    Gives an 8% speedup.

commit 2af96875b10e59e5df8f2057b9033204d728cd85
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Thu May 7 10:49:17 2015 +0200

    Bug fixed.
    
    Not finding any clause instead of backtracking raised an escaping exception.

commit b03070ab6b1545c8fe23f2ada559159a79e8fec5
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Thu May 7 10:29:52 2015 +0200

    Bugs fixed.
    
    Constants hidden in the heads of Appl/Struct should be handled in
    the same way as Const. Fixed.
    
    NOTE: all tests pass, but impl.elpi. To be fixed.

commit f08fc8de8b1e600a2886a56d09b89f8bffb352c6
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Thu May 7 09:57:28 2015 +0200

    New benchmarks.
    
    We have lost really a lot on the Prolog fragment and we are now
    very close to Teyjus performance (still a tiny bit faster).

X17, teyjus: 1.58s
X17, impl16, patternunif: 1.48s
X18, impl16, patternunif: 3.00s
commit c00b4389d7d21c0ae9c012eed41c6ef937fae26a
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Wed May 6 20:11:53 2015 +0200

    Bug fixed.
    
    This is the fixing of the bug found by Enrico's test.
    When a UVar/Arg is dereferenced, we must remember to consider
    the number of bindings we crossed in the destination depth.

commit a8f6642244da6113dbff67bf7ba91c278d3ce2ac
Merge: fcd2351 d6b6a1e
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Wed May 6 19:40:14 2015 +0200

    Merge branch 'performance' of git+ssh://scm.gforge.inria.fr//gitroot/lpcic/lpcic into performance
    
    1. we both added at same time tests/pi4.elpi
       The one by Enrico is called pi5.elpi now.
    2. Enrico fixed a bug but our code changed so much that
       I think it is better to throw away Enrico's patch and
       fix the bug from scratch. pi5.elpi still shows a problem.
    
    Conflicts:
        new_elpi/patternunif.ml
        new_elpi/tests/pi4.elpi

---------------------

X18, impl15, patternunif: 1.80s
commit ffba14dba49e209024229f83ddbcf82b2c203157
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Thu Apr 30 18:51:48 2015 +0200

    Partial commit, many changes.
    
    1. AST moved from Lprun2 to the parser and generalized to lambdas,
     etc. Several files are now broken and commented out because of this.
    2. the parser now parses lambda-abstractions correctly
    3. patternunif is now able to unify abstractions

commit 67229a9b81bed955d8cef28e43e0cfcfff08befa
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Thu Apr 30 18:48:19 2015 +0200

    Some bugs in the Makefile fixed + new test for unification of lambdas.

commit 4a2be7b841d1fc7c0ecd79a7fc162c3cc1dad4f4
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Thu Apr 30 16:22:32 2015 +0200

    New TODO (just an idea).

X18, impl17, Desperate HO + Impl: 1.85s
X18, impl18, patternunif: 1.81s
commit ca9f3a8095bb7607c3c4352c05404d3aae048150
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Thu Apr 30 16:22:11 2015 +0200

    Partial commit that implements pattern-unification.
    
    So far:
    1. type of terms generalized to accomodate lambda-abstractions
       and metavariables applied to a list of variables
    2. variables and constants unified. Constants are given negative
       numbers, variables will be given non negative ones.
    3. ad-hoc Prolog case implemented everywhere to make our tests pass.
    
    TODO: do the benchmarks on CSC's laptop.

X18, impl18, Desperate HO + Impl: 1.74s
commit c7ff0aad144b1fa35c18b033a82041d56b0700ff
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Wed Apr 29 10:59:41 2015 +0200

    Yet another implementation to save String.compare.
    
    strings mapped in 1-1 correspondence to integers and integers
    used. The reverse mapping is only used during pretty-printing.
    Concretely, it does seem to have no effect (to be better tested
    on CSC's laptop).

commit 479eb59fef7985d36801de92a3a56dd269900729
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Wed Apr 29 00:17:31 2015 +0200

    New timings.


X18, impl18, Desperate HO + Impl: 1.73s
commit 136be0e5b8e3b3a8e1f47eb572e778463bfba287
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Wed Apr 29 00:16:48 2015 +0200

    Commit c79d0e3007f66eb553b6d50338faca1e09d8d064 reverted.
    
    Incredibly, systematically projecting out of a pair when looking for
    clauses is slower (on our example??) than comparing strings using
    String.compare. This is probably sensitive to the name of the constants
    used in the program, but for the time being I revert the commit.

============ FROM NOW ON THE TESTS NEED TO BE REDONE BECAUSE AFTER A COMMIT
============ MY LAPTOP IS NOW 31% FASTER :-(

X18: 2.28s
commit bf51f8c6e5de5b80385420f7b01a555aae3eebbb
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Tue Apr 28 14:10:31 2015 +0200

    Semantics of cut fixed and many more tests for cut added.
    
    NOTE: we used to implement cut using an integer lvl. But
    such an implementation is probably not possible because
    alternatives with the same lvl could be related to different
    choice points. Indeed, both our old implementations and the
    original elpi failed on some of the new tests. The new
    implementation replaces indexes with pointers to previous
    alts (i.e. pointers in the or-list), so that we are sure where
    we need to stop (like the WAM does btw).

X18: 2.28s
commit c79d0e3007f66eb553b6d50338faca1e09d8d064
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Tue Apr 28 12:11:04 2015 +0200

    Using pairs string*uniq-int for constants.
    
    Pros: saves up string comparison time when indexing
    Cons: requires a snd during indexing.
    
    Outcome: to be tested on CSC's laptop. We expect this
    version to be slighly faster, but who knows.

X18: 2.23s
commit 0687444c4930dfec4f625af05f3f6137a1ad1330
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Tue Apr 28 11:31:20 2015 +0200

    Enrico's partially tail recursive, slow unification reverted.
    
    Previous non tail recursive unification made "more tail recursive" in the
    case of binary applications. The test does not require more stack space,
    but this is obviously test dependent. This version is the fastest we
    tried so far.

X18: 2.65s
commit b329967c0b88dd143524a0fde8bca9f7acc80123
Author: Enrico Tassi <gares@fettunta.org>
Date:   Sat Apr 25 14:38:07 2015 +0200

    small change, should be closer to the for_all2 semantics

X18: 2.68s
commit f135f9dbc6f8bd6d326de0f9bc9108e6907c82d5
Author: Enrico Tassi <gares@fettunta.org>
Date:   Sat Apr 25 14:35:16 2015 +0200

    tail recursive unif: here same speed for x14, no overflow for x16

X18: 2.33s
commit e8840ad8e7dca60243af88bad4cdbe7d0fcb99b6
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Fri Apr 24 18:07:08 2015 +0200

    Functional two level indexing implemented.

commit eed17f20ffb9a812fe374e4c08689b1840cebe7d
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Fri Apr 24 17:33:33 2015 +0200

    Cut implemented & code refactored.

X18: 2.40s
desperate2.ml
