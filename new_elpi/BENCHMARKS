X16: 2.21s
commit 136be0e5b8e3b3a8e1f47eb572e778463bfba287
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Wed Apr 29 00:16:48 2015 +0200

    Commit c79d0e3007f66eb553b6d50338faca1e09d8d064 reverted.
    
    Incredibly, systematically projecting out of a pair when looking for
    clauses is slower (on our example??) than comparing strings using
    String.compare. This is probably sensitive to the name of the constants
    used in the program, but for the time being I revert the commit.


X18: 2.28s
commit bf51f8c6e5de5b80385420f7b01a555aae3eebbb
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Tue Apr 28 14:10:31 2015 +0200

    Semantics of cut fixed and many more tests for cut added.
    
    NOTE: we used to implement cut using an integer lvl. But
    such an implementation is probably not possible because
    alternatives with the same lvl could be related to different
    choice points. Indeed, both our old implementations and the
    original elpi failed on some of the new tests. The new
    implementation replaces indexes with pointers to previous
    alts (i.e. pointers in the or-list), so that we are sure where
    we need to stop (like the WAM does btw).

X18: 2.28s
commit c79d0e3007f66eb553b6d50338faca1e09d8d064
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Tue Apr 28 12:11:04 2015 +0200

    Using pairs string*uniq-int for constants.
    
    Pros: saves up string comparison time when indexing
    Cons: requires a snd during indexing.
    
    Outcome: to be tested on CSC's laptop. We expect this
    version to be slighly faster, but who knows.

X18: 2.23s
commit 0687444c4930dfec4f625af05f3f6137a1ad1330
Author: Claudio Sacerdoti Coen <claudio@zenone.casamia.org>
Date:   Tue Apr 28 11:31:20 2015 +0200

    Enrico's partially tail recursive, slow unification reverted.
    
    Previous non tail recursive unification made "more tail recursive" in the
    case of binary applications. The test does not require more stack space,
    but this is obviously test dependent. This version is the fastest we
    tried so far.

X18: 2.65s
commit b329967c0b88dd143524a0fde8bca9f7acc80123
Author: Enrico Tassi <gares@fettunta.org>
Date:   Sat Apr 25 14:38:07 2015 +0200

    small change, should be closer to the for_all2 semantics

X18: 2.68s
commit f135f9dbc6f8bd6d326de0f9bc9108e6907c82d5
Author: Enrico Tassi <gares@fettunta.org>
Date:   Sat Apr 25 14:35:16 2015 +0200

    tail recursive unif: here same speed for x14, no overflow for x16

X18: 2.33s
commit e8840ad8e7dca60243af88bad4cdbe7d0fcb99b6
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Fri Apr 24 18:07:08 2015 +0200

    Functional two level indexing implemented.

commit eed17f20ffb9a812fe374e4c08689b1840cebe7d
Author: Cvetan Dunchev <cdunchev@hotmail.com>
Date:   Fri Apr 24 17:33:33 2015 +0200

    Cut implemented & code refactored.

X18: 2.40s
desperate2.ml
