Benchmarks:

0. modify lambda3 to use the bound variables (via a list, etc.)
1. http://www.cs.hofstra.edu/~cscccl/lambda-examples/
   vedi lpcic/elpi/doc/termrep.pdf
2. port all examples we have to Teyjus as well
3. port Teyjus pnf.* and its examples to newelpi
4. port Teyjus hc_interp.* to newelpi
   Note: it is outside the fragment and it needs to be brought
   back in.

Bugs:

1. fix pretty-printing of constants

Possible optimizations:

0. Try alternative implementation for ?n == ?n
   (i.e. go back to the previous unif code, but change to_heap/restrict)
1. avoid unifying the head of the clause
2. optimize neck-cuts during the indexing phase (? maybe not easy/possible)
3. the to_heap could keep the highest non-bound variable to be cached in
   the UVar to make restriction linear
4. compact representation of UVar^d c1 ... cn
5. read-only arrays in place of lists

Missing:
1. occur-check
2. full lambda-prolog

=============================================

How to implement substitution:

- in full lambda-prolog:
  reduce (app (lam F) T) (F T).

- in the fragment: using the copy clause.
  reduce (app (lam F) T) R :- pi x\ copy x T => copy (F x) (R' x), R = R' x.

  copy (app M N) (app M2 N2) :- copy M M2, copy N n2.
  copy (lam F) (lam F2) :- pi x\ copy x x => copy (F x) (F2 x).
