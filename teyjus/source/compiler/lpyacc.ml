type token =
  | MODULE
  | END
  | IMPORT
  | ACCUMULATE
  | ACCUMSIG
  | USESIG
  | LOCAL
  | LOCALKIND
  | CLOSED
  | SIG
  | KIND
  | TYPE
  | TYPEABBREV
  | EXPORTDEF
  | USEONLY
  | INFIXL
  | INFIX
  | INFIXR
  | PREFIX
  | PREFIXR
  | POSTFIX
  | POSTFIXL
  | LAMBDA
  | FORALL
  | FORSOME
  | COLONDASH
  | IMPLIES
  | INFIXLAMBDA
  | TYARROW
  | CUT
  | PI
  | SIGMA
  | COMMA
  | SEMICOLON
  | AMPAND
  | RDIVIDE
  | NILLIST
  | LISTCONS
  | EQUAL
  | PLUS
  | MINUS
  | TIMES
  | LESS
  | LEQ
  | GTR
  | GEQ
  | UMINUS
  | PERIOD
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | COLON
  | VBAR
  | SIGSTART
  | MODSTART
  | TERMSTART
  | EOF
  | ID of ((string * Preabsyn.pidkind))
  | SYID of ((string * Preabsyn.pidkind))
  | VID of ((string * Preabsyn.pidkind))
  | UPCID of ((string * Preabsyn.pidkind))
  | STRLIT of (string)
  | INTLIT of (int)
  | REALLIT of (float)

open Parsing;;
let _ = parse_error;;
# 2 "lpyacc.mly"
(****************************************************************************
*Copyright 2008
*  Andrew Gacek, Steven Holte, Gopalan Nadathur, Xiaochu Qi, Zach Snow
****************************************************************************)
(****************************************************************************
* This file is part of Teyjus.
*
* Teyjus is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Teyjus is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Teyjus.  If not, see <http://www.gnu.org/licenses/>.
****************************************************************************)

(****************************************************************************
*lpyacc.mly:
* This file contains the Teyjus ocamlyacc specification.  The semantic
* actions are more or less correct...
****************************************************************************)

(****************************************************************************
* Shift/Reduce Conflicts
*   This grammar has 6 shift/reduce conflicts, which can be examined by
*   running ocamlyacc with the -v flag. These conflicts comes from two
*   sources: error handling and typing. The conflicts due to error handling
*   are benign. The conflicts from typing stem from trying to parse the
*   string "A : B C". This string can be interpreted as a term A with type
*   B C or as a term A with type B where A is applied to term C. In order to
*   agree with the previous Teyjus grammar, we choose the first
*   interpretation. In terms of shift/reduce conflicts, this coincides with
*   the grammar's choice to shift rather than reduce after reading "A : B".
****************************************************************************)
open Lexing
open Preabsyn

let basename () =
  Filename.chop_extension (Filename.basename (symbol_start_pos ()).pos_fname)

type pos = Errormsg.pos

let maxPrecedence = 255

(**********************************************************************
* These data structures are the result of parsing a signature or
* module.  If a signature is parsed, the appropriate structures are
* placed in a Preabsyn.Signature structure and returned.  If a module
* is parsed, the data is placed in a Preabsyn.Module.
**********************************************************************)
let importedModList = ref []
let accumulatedModList = ref []
let accumulatedSigList = ref []
let useSigList = ref []
let useOnlyList = ref []
let exportList = ref []
let clauseList = ref []

let globalConstants = ref []
let closedConstants = ref []
let localConstants = ref []

let globalKinds = ref []
let localKinds = ref []

let globalTypeAbbrevs = ref []

let fixityList = ref []

let reverseResults () =
  importedModList := List.rev !importedModList;
  accumulatedModList := List.rev !accumulatedModList;
  accumulatedSigList := List.rev !accumulatedSigList;
  useSigList := List.rev !useSigList;
  clauseList := List.rev !clauseList;

  globalConstants := !globalConstants;
  closedConstants := !closedConstants;
  localConstants := !localConstants;
  useOnlyList := !useOnlyList;
  exportList := !exportList;
  
  globalKinds := !globalKinds;
  localKinds := !localKinds;

  globalTypeAbbrevs := List.rev !globalTypeAbbrevs;

  fixityList := List.rev !fixityList

let clearResults () =
  importedModList := [];
  accumulatedModList := [];
  accumulatedSigList := [];
  useSigList := [];
  useOnlyList := [];
  exportList := [];
  clauseList := [];

  globalConstants := [];
  closedConstants := [];
  localConstants := [];

  globalKinds := [];
  localKinds := [];

  globalTypeAbbrevs := [];

  fixityList := []

(**********************************************************************
*getPos:
* Gets the character position of the given token.
**********************************************************************)
let getPos i =
  Parsing.rhs_start_pos i

(* Accessors for IDs  *)
let getIDName (name, _) = name
let getIDKind (_, kind) = kind

let genericError str =
  Errormsg.error (getPos 1) ("Unexpected input while parsing " ^ str)

let makeSymbol (name, kind) =
  Symbol(Symbol.symbol name, kind, getPos 1)

let makeTuple ?ty (name, kind) =
  (Symbol.symbol name, ty, kind, getPos 1)
      
let makeConst ?ty sym =
  IdTerm(Symbol.symbol sym, ty, ConstID, getPos 1)
      
let makeModule () =
  reverseResults () ;
  let m = Module(basename (), !globalConstants, !localConstants,
                 !closedConstants, !useOnlyList, !exportList, !fixityList,
                 !globalKinds, !localKinds, !globalTypeAbbrevs,
                 !clauseList, !accumulatedModList, !accumulatedSigList,
                 !useSigList, !importedModList) in
    clearResults () ;
    m

let makeSignature () =
  reverseResults ();
  let s = Signature(basename (), !globalConstants, !useOnlyList, !exportList,
                    !globalKinds, !globalTypeAbbrevs, !fixityList,
                    !accumulatedSigList, !useSigList) in
    clearResults ();
    s

let parse_error s =
  if s = "syntax error" then
    let pos = Parsing.symbol_start_pos () in
    Errormsg.error pos "syntax error"
  else
    ()

# 234 "lpyacc.ml"
let yytransl_const = [|
  257 (* MODULE *);
  258 (* END *);
  259 (* IMPORT *);
  260 (* ACCUMULATE *);
  261 (* ACCUMSIG *);
  262 (* USESIG *);
  263 (* LOCAL *);
  264 (* LOCALKIND *);
  265 (* CLOSED *);
  266 (* SIG *);
  267 (* KIND *);
  268 (* TYPE *);
  269 (* TYPEABBREV *);
  270 (* EXPORTDEF *);
  271 (* USEONLY *);
  272 (* INFIXL *);
  273 (* INFIX *);
  274 (* INFIXR *);
  275 (* PREFIX *);
  276 (* PREFIXR *);
  277 (* POSTFIX *);
  278 (* POSTFIXL *);
  279 (* LAMBDA *);
  280 (* FORALL *);
  281 (* FORSOME *);
  282 (* COLONDASH *);
  283 (* IMPLIES *);
  284 (* INFIXLAMBDA *);
  285 (* TYARROW *);
  286 (* CUT *);
  287 (* PI *);
  288 (* SIGMA *);
  289 (* COMMA *);
  290 (* SEMICOLON *);
  291 (* AMPAND *);
  292 (* RDIVIDE *);
  293 (* NILLIST *);
  294 (* LISTCONS *);
  295 (* EQUAL *);
  296 (* PLUS *);
  297 (* MINUS *);
  298 (* TIMES *);
  299 (* LESS *);
  300 (* LEQ *);
  301 (* GTR *);
  302 (* GEQ *);
  303 (* UMINUS *);
  304 (* PERIOD *);
  305 (* LPAREN *);
  306 (* RPAREN *);
  307 (* LBRACK *);
  308 (* RBRACK *);
  309 (* COLON *);
  310 (* VBAR *);
  311 (* SIGSTART *);
  312 (* MODSTART *);
  313 (* TERMSTART *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  314 (* ID *);
  315 (* SYID *);
  316 (* VID *);
  317 (* UPCID *);
  318 (* STRLIT *);
  319 (* INTLIT *);
  320 (* REALLIT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\025\000\025\000\025\000\025\000\
\004\000\004\000\005\000\005\000\006\000\006\000\006\000\007\000\
\007\000\007\000\008\000\008\000\008\000\008\000\008\000\008\000\
\027\000\027\000\027\000\027\000\014\000\014\000\014\000\014\000\
\013\000\013\000\013\000\013\000\009\000\009\000\009\000\011\000\
\011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\015\000\015\000\029\000\029\000\030\000\030\000\
\016\000\016\000\017\000\017\000\018\000\018\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\003\000\003\000\003\000\
\003\000\020\000\020\000\021\000\021\000\028\000\028\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\026\000\026\000\
\026\000\026\000\026\000\026\000\000\000\000\000\000\000"

let yylen = "\002\000\
\004\000\001\000\004\000\001\000\001\000\001\000\001\000\001\000\
\003\000\002\000\003\000\002\000\000\000\001\000\001\000\000\000\
\001\000\001\000\000\000\004\000\004\000\004\000\004\000\002\000\
\000\000\004\000\004\000\002\000\001\000\003\000\003\000\003\000\
\001\000\001\000\003\000\003\000\000\000\002\000\002\000\000\000\
\002\000\004\000\004\000\007\000\006\000\004\000\004\000\003\000\
\004\000\003\000\004\000\001\000\003\000\004\000\003\000\004\000\
\003\000\004\000\001\000\001\000\003\000\003\000\001\000\003\000\
\003\000\001\000\001\000\002\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\002\000\
\002\000\001\000\002\000\001\000\003\000\001\000\002\000\001\000\
\003\000\002\000\003\000\005\000\002\000\002\000\001\000\001\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\001\000\001\000\
\001\000\003\000\003\000\003\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\133\000\000\000\
\000\000\000\000\134\000\000\000\000\000\112\000\113\000\099\000\
\000\000\000\000\103\000\100\000\101\000\102\000\000\000\000\000\
\000\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\000\000\000\000\000\000\000\000\000\000\000\000\116\000\
\115\000\114\000\135\000\000\000\082\000\084\000\088\000\096\000\
\000\000\010\000\005\000\007\000\008\000\006\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\079\000\081\000\000\000\
\000\000\000\000\000\000\000\000\093\000\000\000\094\000\090\000\
\000\000\000\000\000\000\000\000\000\000\078\000\080\000\083\000\
\000\000\009\000\024\000\000\000\000\000\000\000\000\000\000\000\
\011\000\028\000\000\000\000\000\000\000\000\000\122\000\000\000\
\067\000\069\000\123\000\124\000\125\000\126\000\089\000\091\000\
\000\000\130\000\132\000\098\000\131\000\000\000\000\000\029\000\
\000\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\000\071\000\073\000\074\000\
\075\000\076\000\077\000\015\000\039\000\001\000\038\000\052\000\
\000\000\000\000\000\000\017\000\018\000\003\000\041\000\000\000\
\000\000\068\000\000\000\000\000\020\000\021\000\022\000\023\000\
\033\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\026\000\070\000\065\000\
\092\000\030\000\032\000\031\000\000\000\053\000\000\000\063\000\
\055\000\000\000\000\000\059\000\000\000\057\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\050\000\000\000\000\000\
\035\000\036\000\054\000\000\000\000\000\056\000\000\000\058\000\
\042\000\043\000\000\000\086\000\000\000\046\000\049\000\051\000\
\047\000\061\000\064\000\062\000\000\000\000\000\087\000\045\000\
\000\000\044\000"

let yydgoto = "\004\000\
\007\000\011\000\043\000\008\000\012\000\134\000\142\000\057\000\
\088\000\135\000\093\000\136\000\155\000\111\000\179\000\095\000\
\096\000\097\000\137\000\044\000\045\000\046\000\047\000\048\000\
\098\000\049\000\061\000\205\000\180\000\181\000"

let yysindex = "\024\000\
\076\255\039\255\017\003\000\000\240\254\030\255\000\000\040\255\
\012\255\030\255\000\000\092\255\006\000\000\000\000\000\000\000\
\062\255\066\255\000\000\000\000\000\000\000\000\087\255\097\255\
\118\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\003\181\255\119\255\126\255\129\255\130\255\000\000\
\000\000\000\000\000\000\102\002\000\000\000\000\000\000\000\000\
\125\255\000\000\000\000\000\000\000\000\000\000\136\255\137\255\
\172\255\000\000\138\255\139\255\064\255\000\000\000\000\051\255\
\051\255\051\255\051\255\051\255\000\000\143\003\000\000\000\000\
\104\003\051\255\051\255\051\255\051\255\000\000\000\000\000\000\
\221\003\000\000\000\000\030\255\030\255\030\255\030\255\131\000\
\000\000\000\000\030\255\030\255\020\003\051\255\000\000\251\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\221\003\000\000\000\000\000\000\000\000\221\003\236\254\000\000\
\245\254\246\254\253\254\000\000\048\255\048\255\048\255\048\255\
\048\255\083\255\048\255\048\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\255\000\255\013\255\000\000\000\000\000\000\000\000\140\255\
\051\255\000\000\182\003\006\255\000\000\000\000\000\000\000\000\
\000\000\000\000\014\255\002\255\035\255\008\255\088\255\030\255\
\051\255\065\255\069\255\252\254\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\099\255\000\000\141\255\000\000\
\000\000\003\255\143\255\000\000\159\255\000\000\144\255\145\255\
\146\255\101\255\147\255\000\000\148\255\000\000\149\255\150\255\
\000\000\000\000\000\000\151\255\248\254\000\000\003\255\000\000\
\000\000\000\000\051\255\000\000\105\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\152\255\051\255\000\000\000\000\
\154\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\203\000\000\000\000\000\001\000\
\204\000\000\000\000\000\197\002\000\000\000\000\000\000\000\000\
\049\001\089\001\000\000\000\000\000\000\000\000\132\001\179\001\
\223\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\170\000\209\000\006\002\248\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\066\000\000\000\000\000\000\000\232\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\205\000\
\000\000\000\000\000\000\000\000\206\000\000\000\000\000\142\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\122\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\136\000\015\000\082\000\100\255\198\255\
\000\000\135\000\000\000\233\255\217\255\000\000\000\000\000\000\
\250\255\000\000\000\000\000\000\056\000\057\000"

let yytablesize = 1309
let yytable = "\055\000\
\019\000\184\000\085\000\059\000\080\000\063\000\099\000\100\000\
\101\000\102\000\070\000\073\000\148\000\176\000\176\000\106\000\
\107\000\108\000\109\000\176\000\199\000\148\000\148\000\145\000\
\001\000\002\000\003\000\149\000\173\000\148\000\080\000\050\000\
\148\000\080\000\173\000\144\000\150\000\151\000\009\000\056\000\
\173\000\211\000\212\000\094\000\152\000\148\000\173\000\165\000\
\010\000\177\000\178\000\178\000\051\000\052\000\053\000\054\000\
\178\000\110\000\192\000\058\000\166\000\174\000\094\000\170\000\
\171\000\037\000\172\000\173\000\091\000\092\000\080\000\051\000\
\052\000\053\000\054\000\005\000\006\000\112\000\112\000\112\000\
\112\000\147\000\182\000\094\000\112\000\112\000\168\000\051\000\
\052\000\053\000\054\000\060\000\051\000\052\000\053\000\054\000\
\175\000\173\000\183\000\094\000\185\000\173\000\187\000\189\000\
\191\000\153\000\154\000\080\000\051\000\052\000\053\000\054\000\
\188\000\094\000\064\000\161\000\190\000\094\000\065\000\060\000\
\173\000\060\000\051\000\052\000\053\000\054\000\051\000\052\000\
\053\000\054\000\132\000\160\000\156\000\157\000\158\000\159\000\
\094\000\162\000\163\000\066\000\051\000\052\000\053\000\054\000\
\213\000\051\000\052\000\053\000\054\000\067\000\203\000\164\000\
\081\000\186\000\214\000\217\000\193\000\194\000\051\000\052\000\
\053\000\054\000\051\000\052\000\053\000\054\000\113\000\114\000\
\115\000\127\000\068\000\074\000\138\000\139\000\084\000\085\000\
\086\000\087\000\075\000\204\000\071\000\076\000\077\000\082\000\
\083\000\089\000\090\000\199\000\195\000\167\000\198\000\200\000\
\201\000\202\000\206\000\207\000\208\000\209\000\215\000\216\000\
\210\000\218\000\002\000\004\000\013\000\016\000\014\000\015\000\
\129\000\133\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\143\000\034\000\146\000\035\000\
\072\000\196\000\197\000\000\000\000\000\000\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\000\000\000\000\128\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\000\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\000\000\
\000\000\000\000\019\000\019\000\000\000\000\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\117\000\019\000\085\000\019\000\085\000\062\000\085\000\000\000\
\085\000\000\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\037\000\000\000\037\000\000\000\000\000\000\000\000\000\
\037\000\037\000\037\000\000\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\118\000\000\000\000\000\037\000\037\000\000\000\000\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\000\000\037\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\013\000\119\000\116\000\000\000\000\000\000\000\
\000\000\117\000\118\000\119\000\000\000\120\000\121\000\122\000\
\123\000\124\000\125\000\126\000\127\000\128\000\129\000\130\000\
\131\000\000\000\000\000\000\000\014\000\015\000\000\000\000\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\032\000\033\000\120\000\034\000\000\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\127\000\127\000\127\000\000\000\127\000\
\127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
\127\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
\127\000\127\000\127\000\127\000\127\000\127\000\121\000\127\000\
\000\000\000\000\000\000\127\000\127\000\127\000\127\000\127\000\
\127\000\127\000\129\000\129\000\129\000\000\000\129\000\129\000\
\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
\129\000\129\000\129\000\129\000\129\000\097\000\129\000\000\000\
\000\000\000\000\129\000\129\000\129\000\129\000\129\000\129\000\
\129\000\128\000\128\000\128\000\000\000\128\000\128\000\128\000\
\128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
\128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
\128\000\128\000\128\000\128\000\095\000\128\000\000\000\000\000\
\000\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\117\000\117\000\000\000\000\000\117\000\117\000\
\117\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
\117\000\117\000\117\000\117\000\117\000\117\000\117\000\117\000\
\117\000\117\000\117\000\117\000\117\000\079\000\117\000\000\000\
\000\000\000\000\117\000\117\000\117\000\117\000\117\000\117\000\
\117\000\000\000\118\000\118\000\000\000\000\000\118\000\118\000\
\118\000\118\000\118\000\118\000\118\000\118\000\118\000\118\000\
\118\000\118\000\118\000\118\000\118\000\118\000\118\000\118\000\
\118\000\118\000\118\000\118\000\118\000\066\000\118\000\000\000\
\000\000\000\000\118\000\118\000\118\000\118\000\118\000\118\000\
\118\000\000\000\000\000\000\000\000\000\119\000\119\000\000\000\
\000\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\000\000\119\000\000\000\000\000\000\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\120\000\120\000\000\000\000\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\040\000\
\120\000\000\000\000\000\000\000\120\000\120\000\120\000\120\000\
\120\000\120\000\120\000\000\000\000\000\000\000\000\000\000\000\
\121\000\121\000\000\000\000\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\141\000\121\000\000\000\000\000\000\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\097\000\
\097\000\000\000\000\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\000\000\097\000\000\000\000\000\000\000\097\000\
\097\000\097\000\097\000\097\000\097\000\097\000\095\000\095\000\
\000\000\000\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\000\000\095\000\000\000\000\000\000\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\015\000\000\000\000\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\078\000\034\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\000\000\066\000\
\066\000\066\000\000\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\000\000\066\000\
\066\000\066\000\000\000\066\000\000\000\000\000\025\000\000\000\
\000\000\025\000\025\000\066\000\066\000\066\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\140\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\120\000\121\000\
\122\000\123\000\124\000\125\000\126\000\127\000\128\000\129\000\
\130\000\131\000\014\000\015\000\000\000\000\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\069\000\034\000\000\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\015\000\000\000\000\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\000\000\034\000\000\000\035\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\014\000\015\000\000\000\000\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\000\000\
\034\000\000\000\035\000\104\000\000\000\105\000\000\000\000\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\014\000\015\000\000\000\000\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\000\000\034\000\
\103\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\014\000\
\015\000\000\000\000\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\028\000\
\029\000\030\000\031\000\032\000\033\000\000\000\034\000\000\000\
\035\000\169\000\000\000\000\000\000\000\000\000\000\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\014\000\015\000\
\000\000\000\000\016\000\017\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\033\000\000\000\034\000\000\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000"

let yycheck = "\006\000\
\000\000\158\000\000\000\010\000\044\000\000\000\065\000\066\000\
\067\000\068\000\034\000\035\000\033\001\012\001\012\001\074\000\
\075\000\076\000\077\000\012\001\029\001\033\001\033\001\029\001\
\001\000\002\000\003\000\048\001\033\001\033\001\070\000\048\001\
\033\001\073\000\033\001\094\000\048\001\048\001\000\001\000\001\
\033\001\050\001\199\000\049\001\048\001\033\001\033\001\048\001\
\010\001\048\001\049\001\049\001\058\001\059\001\060\001\061\001\
\049\001\081\000\063\001\048\001\048\001\048\001\049\001\058\001\
\059\001\000\000\061\001\033\001\005\001\006\001\110\000\058\001\
\059\001\060\001\061\001\000\001\001\001\084\000\085\000\086\000\
\087\000\105\000\048\001\049\001\091\000\092\000\145\000\058\001\
\059\001\060\001\061\001\000\001\058\001\059\001\060\001\061\001\
\155\000\033\001\157\000\049\001\159\000\033\001\161\000\162\000\
\163\000\058\001\059\001\147\000\058\001\059\001\060\001\061\001\
\048\001\049\001\053\001\122\000\048\001\049\001\053\001\048\001\
\033\001\050\001\058\001\059\001\060\001\061\001\058\001\059\001\
\060\001\061\001\000\000\049\001\118\000\119\000\120\000\121\000\
\049\001\123\000\124\000\053\001\058\001\059\001\060\001\061\001\
\203\000\058\001\059\001\060\001\061\001\053\001\050\001\137\000\
\028\001\160\000\050\001\214\000\058\001\059\001\058\001\059\001\
\060\001\061\001\058\001\059\001\060\001\061\001\085\000\086\000\
\087\000\000\000\053\001\053\001\091\000\092\000\003\001\004\001\
\005\001\006\001\053\001\186\000\000\001\053\001\053\001\048\001\
\048\001\048\001\048\001\029\001\048\001\050\001\048\001\048\001\
\048\001\048\001\048\001\048\001\048\001\048\001\205\000\048\001\
\050\001\048\001\000\000\000\000\000\000\000\000\026\001\027\001\
\000\000\088\000\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\093\000\049\001\096\000\051\001\
\052\001\178\000\178\000\255\255\255\255\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\000\000\049\001\048\001\051\001\050\001\048\001\052\001\255\255\
\054\001\255\255\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\000\001\255\255\002\001\255\255\255\255\255\255\255\255\
\007\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\000\000\255\255\255\255\026\001\027\001\255\255\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\255\255\049\001\255\255\051\001\255\255\255\255\255\255\
\255\255\255\255\255\255\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\000\001\000\000\002\001\255\255\255\255\255\255\
\255\255\007\001\008\001\009\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\000\000\049\001\255\255\051\001\255\255\255\255\
\255\255\255\255\255\255\255\255\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\026\001\027\001\028\001\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\000\000\054\001\
\255\255\255\255\255\255\058\001\059\001\060\001\061\001\062\001\
\063\001\064\001\026\001\027\001\028\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\000\000\054\001\255\255\
\255\255\255\255\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\026\001\027\001\028\001\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\000\000\054\001\255\255\255\255\
\255\255\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\000\000\054\001\255\255\
\255\255\255\255\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\255\255\026\001\027\001\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\000\000\054\001\255\255\
\255\255\255\255\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\255\255\054\001\255\255\255\255\255\255\058\001\059\001\060\001\
\061\001\062\001\063\001\064\001\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\000\000\
\054\001\255\255\255\255\255\255\058\001\059\001\060\001\061\001\
\062\001\063\001\064\001\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\000\000\054\001\255\255\255\255\255\255\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\026\001\
\027\001\255\255\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\054\001\255\255\255\255\255\255\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\026\001\027\001\
\255\255\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\255\255\054\001\255\255\255\255\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\255\255\255\255\255\255\255\255\255\255\255\255\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\255\255\026\001\
\027\001\028\001\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\050\001\
\051\001\052\001\255\255\054\001\255\255\255\255\002\001\255\255\
\255\255\005\001\006\001\062\001\063\001\064\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\002\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\001\255\255\255\255\255\255\255\255\002\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\026\001\027\001\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\000\001\049\001\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\255\255\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\255\255\049\001\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\255\255\058\001\059\001\060\001\061\001\062\001\063\001\
\064\001\026\001\027\001\255\255\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\255\255\
\049\001\255\255\051\001\052\001\255\255\054\001\255\255\255\255\
\255\255\058\001\059\001\060\001\061\001\062\001\063\001\064\001\
\026\001\027\001\255\255\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\255\255\049\001\
\050\001\051\001\255\255\255\255\255\255\255\255\255\255\255\255\
\058\001\059\001\060\001\061\001\062\001\063\001\064\001\026\001\
\027\001\255\255\255\255\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\255\255\049\001\255\255\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\058\001\
\059\001\060\001\061\001\062\001\063\001\064\001\026\001\027\001\
\255\255\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\255\255\049\001\255\255\051\001\
\255\255\255\255\255\255\255\255\255\255\255\255\058\001\059\001\
\060\001\061\001\062\001\063\001\064\001"

let yynames_const = "\
  MODULE\000\
  END\000\
  IMPORT\000\
  ACCUMULATE\000\
  ACCUMSIG\000\
  USESIG\000\
  LOCAL\000\
  LOCALKIND\000\
  CLOSED\000\
  SIG\000\
  KIND\000\
  TYPE\000\
  TYPEABBREV\000\
  EXPORTDEF\000\
  USEONLY\000\
  INFIXL\000\
  INFIX\000\
  INFIXR\000\
  PREFIX\000\
  PREFIXR\000\
  POSTFIX\000\
  POSTFIXL\000\
  LAMBDA\000\
  FORALL\000\
  FORSOME\000\
  COLONDASH\000\
  IMPLIES\000\
  INFIXLAMBDA\000\
  TYARROW\000\
  CUT\000\
  PI\000\
  SIGMA\000\
  COMMA\000\
  SEMICOLON\000\
  AMPAND\000\
  RDIVIDE\000\
  NILLIST\000\
  LISTCONS\000\
  EQUAL\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  LESS\000\
  LEQ\000\
  GTR\000\
  GEQ\000\
  UMINUS\000\
  PERIOD\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  COLON\000\
  VBAR\000\
  SIGSTART\000\
  MODSTART\000\
  TERMSTART\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  SYID\000\
  VID\000\
  UPCID\000\
  STRLIT\000\
  INTLIT\000\
  REALLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 212 "lpyacc.mly"
                                                ( makeModule () )
# 860 "lpyacc.ml"
               : Preabsyn.pmodule))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "lpyacc.mly"
                                                ( genericError "module" ;
                                                  makeModule () )
# 867 "lpyacc.ml"
               : Preabsyn.pmodule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'sigpreamble) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 216 "lpyacc.mly"
                                                ( makeSignature () )
# 877 "lpyacc.ml"
               : Preabsyn.pmodule))
; (fun __caml_parser_env ->
    Obj.repr(
# 217 "lpyacc.mly"
                                                ( genericError "signature" ;
                                                  makeSignature () )
# 884 "lpyacc.ml"
               : Preabsyn.pmodule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 221 "lpyacc.mly"
                              ( _1 )
# 891 "lpyacc.ml"
               : (string * Preabsyn.pidkind)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 222 "lpyacc.mly"
                              ( _1 )
# 898 "lpyacc.ml"
               : (string * Preabsyn.pidkind)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 223 "lpyacc.mly"
                              ( _1 )
# 905 "lpyacc.ml"
               : (string * Preabsyn.pidkind)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 224 "lpyacc.mly"
                              ( _1 )
# 912 "lpyacc.ml"
               : (string * Preabsyn.pidkind)))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 228 "lpyacc.mly"
      ( if getIDName _2 <> basename () then
          Errormsg.error (getPos 2)
            ("Expected module name '" ^ basename () ^
            "', found module name '" ^ (getIDName _2) ^ "'.") )
# 922 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "lpyacc.mly"
                              ( genericError "module header" )
# 928 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 237 "lpyacc.mly"
      ( if getIDName _2 <> basename () then
          Errormsg.error (getPos 2)
            ("Expected signature name '" ^ basename () ^ "'.") )
# 937 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 241 "lpyacc.mly"
                              ( genericError "signature header" )
# 943 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 244 "lpyacc.mly"
                              (  )
# 949 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 245 "lpyacc.mly"
                              (  )
# 955 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "lpyacc.mly"
                              (  )
# 961 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "lpyacc.mly"
                              (  )
# 967 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "lpyacc.mly"
                              (  )
# 973 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 251 "lpyacc.mly"
                              (  )
# 979 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "lpyacc.mly"
                              (  )
# 985 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 257 "lpyacc.mly"
      ( importedModList := _3 @ !importedModList )
# 993 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 260 "lpyacc.mly"
      ( accumulatedModList := _3 @ !accumulatedModList )
# 1001 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 263 "lpyacc.mly"
      ( accumulatedSigList := _3 @ !accumulatedSigList )
# 1009 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 266 "lpyacc.mly"
      ( useSigList := _3 @ !useSigList )
# 1017 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "lpyacc.mly"
                              ( genericError "preamble" )
# 1023 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 271 "lpyacc.mly"
                              (  )
# 1029 "lpyacc.ml"
               : 'sigpreamble))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'sigpreamble) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 274 "lpyacc.mly"
      ( useSigList := _3 @ !useSigList )
# 1037 "lpyacc.ml"
               : 'sigpreamble))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'sigpreamble) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 277 "lpyacc.mly"
      ( accumulatedSigList := _3 @ !accumulatedSigList )
# 1045 "lpyacc.ml"
               : 'sigpreamble))
; (fun __caml_parser_env ->
    Obj.repr(
# 279 "lpyacc.mly"
                              ( genericError "preamble" )
# 1051 "lpyacc.ml"
               : 'sigpreamble))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 282 "lpyacc.mly"
                              ( (makeSymbol _1) :: [] )
# 1058 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 283 "lpyacc.mly"
                              ( (makeSymbol _3) :: _1 )
# 1066 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 284 "lpyacc.mly"
                              ( (makeSymbol _3) :: _1 )
# 1074 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 285 "lpyacc.mly"
                              ( (makeSymbol _3) :: _1 )
# 1082 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 289 "lpyacc.mly"
                              ( (makeSymbol _1) :: [] )
# 1089 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 290 "lpyacc.mly"
                              ( (makeSymbol _1) :: [] )
# 1096 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 291 "lpyacc.mly"
                              ( (makeSymbol _3) :: _1 )
# 1104 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 292 "lpyacc.mly"
                              ( (makeSymbol _3) :: _1 )
# 1112 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    Obj.repr(
# 295 "lpyacc.mly"
                              (  )
# 1118 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 296 "lpyacc.mly"
                              (  )
# 1126 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 297 "lpyacc.mly"
                              (  )
# 1134 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 300 "lpyacc.mly"
                              (  )
# 1140 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 301 "lpyacc.mly"
                              (  )
# 1148 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 305 "lpyacc.mly"
      ( globalKinds := Kind(_2, Some (_3 - 1), getPos 1) :: !globalKinds )
# 1156 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    Obj.repr(
# 308 "lpyacc.mly"
      ( globalConstants := Constant(_2, Some _3, getPos 1) :: !globalConstants )
# 1164 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : (string * Preabsyn.pidkind)) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'arglist) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    Obj.repr(
# 311 "lpyacc.mly"
      ( globalTypeAbbrevs :=
          TypeAbbrev(makeSymbol _3, (List.map makeSymbol _4), _6, getPos 1) ::
            !globalTypeAbbrevs )
# 1175 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : (string * Preabsyn.pidkind)) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    Obj.repr(
# 316 "lpyacc.mly"
      ( globalTypeAbbrevs :=
          TypeAbbrev(makeSymbol _3, [], _5, getPos 1) :: !globalTypeAbbrevs )
# 1184 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : (string * Preabsyn.pidkind)) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    Obj.repr(
# 320 "lpyacc.mly"
      ( globalTypeAbbrevs :=
          TypeAbbrev(makeSymbol _2, [], _3, getPos 1) :: !globalTypeAbbrevs )
# 1193 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Preabsyn.pfixitykind) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 324 "lpyacc.mly"
      ( if _3 < 0 || _3 > maxPrecedence then
          Errormsg.error (getPos 1)
            ("Precedence must be between 0 and " ^ (string_of_int _3) ^ ".")
        else
          fixityList := Fixity(_2, _1, _3, getFixityPos _1) :: !fixityList )
# 1206 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 331 "lpyacc.mly"
      ( exportList := Constant(_2, None, getPos 1) :: !exportList )
# 1213 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    Obj.repr(
# 334 "lpyacc.mly"
      ( exportList := Constant(_2, Some _3, getPos 1) :: !exportList )
# 1221 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 337 "lpyacc.mly"
      ( useOnlyList := Constant(_2, None, getPos 1) :: !useOnlyList )
# 1228 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    Obj.repr(
# 340 "lpyacc.mly"
      ( useOnlyList := Constant(_2, Some _3, getPos 1) :: !useOnlyList )
# 1236 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 343 "lpyacc.mly"
             (  )
# 1243 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 346 "lpyacc.mly"
      ( localConstants := Constant(_2, None, getPos 1) :: !localConstants )
# 1250 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    Obj.repr(
# 349 "lpyacc.mly"
      ( localConstants := Constant(_2, Some _3, getPos 1) :: !localConstants )
# 1258 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 352 "lpyacc.mly"
      ( localKinds := Kind(_2, None, getPos 1) :: !localKinds )
# 1265 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 355 "lpyacc.mly"
      ( localKinds := Kind(_2, Some (_3 - 1), getPos 1) :: !localKinds )
# 1273 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 358 "lpyacc.mly"
      ( closedConstants := Constant(_2, None, getPos 1) :: !closedConstants )
# 1280 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    Obj.repr(
# 361 "lpyacc.mly"
      ( closedConstants := Constant(_2, Some _3, getPos 1) :: !closedConstants )
# 1288 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'kind_arrow) in
    Obj.repr(
# 364 "lpyacc.mly"
                              ( _1 )
# 1295 "lpyacc.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_type) in
    Obj.repr(
# 365 "lpyacc.mly"
                              ( 1 )
# 1302 "lpyacc.ml"
               : int))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'kind_arrow) in
    Obj.repr(
# 368 "lpyacc.mly"
                                  ( _2 )
# 1309 "lpyacc.ml"
               : 'kind_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'paren_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 369 "lpyacc.mly"
                              ( _3 + 1 )
# 1317 "lpyacc.ml"
               : 'kind_arrow))
; (fun __caml_parser_env ->
    Obj.repr(
# 372 "lpyacc.mly"
                              (())
# 1323 "lpyacc.ml"
               : 'paren_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'paren_type) in
    Obj.repr(
# 373 "lpyacc.mly"
                              (())
# 1330 "lpyacc.ml"
               : 'paren_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.ptype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 376 "lpyacc.mly"
                             ( Arrow(_1, _3, getPos 1) )
# 1338 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 377 "lpyacc.mly"
                             ( _1 )
# 1345 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 380 "lpyacc.mly"
                             ( _1 )
# 1352 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 381 "lpyacc.mly"
                             ( App(_1, _2, getPos 1) )
# 1360 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 384 "lpyacc.mly"
                             ( Atom(Symbol.symbol (getIDName _1),
                                    getIDKind _1, getPos 1) )
# 1368 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    Obj.repr(
# 386 "lpyacc.mly"
                             ( _2 )
# 1375 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    Obj.repr(
# 389 "lpyacc.mly"
                             ( Infix(getPos 1) )
# 1381 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 390 "lpyacc.mly"
                             ( Infixl(getPos 1) )
# 1387 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 391 "lpyacc.mly"
                             ( Infixr(getPos 1) )
# 1393 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 392 "lpyacc.mly"
                             ( Prefix(getPos 1) )
# 1399 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 393 "lpyacc.mly"
                             ( Prefixr(getPos 1) )
# 1405 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 394 "lpyacc.mly"
                             ( Postfix(getPos 1) )
# 1411 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 395 "lpyacc.mly"
                             ( Postfixl(getPos 1) )
# 1417 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    Obj.repr(
# 398 "lpyacc.mly"
                             ( let pt = SeqTerm(List.rev _1, (getPos 1)) in
                                 clauseList := Clause(pt) :: !clauseList ;
                                 pt )
# 1426 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 401 "lpyacc.mly"
                             ( genericError "clause" ; ErrorTerm )
# 1432 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    Obj.repr(
# 403 "lpyacc.mly"
                             ( Errormsg.error (getPos 1)
                                 "Clause never terminated" ;
                               ErrorTerm )
# 1441 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 407 "lpyacc.mly"
                             ( genericError "clause" ;
                               Errormsg.error (getPos 1)
                                 "Clause never terminated" ;
                               ErrorTerm )
# 1450 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 413 "lpyacc.mly"
                             ( _1 :: [] )
# 1457 "lpyacc.ml"
               : Preabsyn.pterm list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 414 "lpyacc.mly"
                             ( _2 :: _1 )
# 1465 "lpyacc.ml"
               : Preabsyn.pterm list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 417 "lpyacc.mly"
                             ( _1 )
# 1472 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm list) in
    Obj.repr(
# 420 "lpyacc.mly"
      ( LambdaTerm([TypeSymbol _1], List.rev _3, getPos 1) )
# 1480 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 423 "lpyacc.mly"
                             ( _1 :: [] )
# 1487 "lpyacc.ml"
               : 'arglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'arglist) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 424 "lpyacc.mly"
                             ( _2 :: _1 )
# 1495 "lpyacc.ml"
               : 'arglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 427 "lpyacc.mly"
                             ( _1 )
# 1502 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    Obj.repr(
# 428 "lpyacc.mly"
                             ( SeqTerm(List.rev _2, getPos 2) )
# 1509 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 430 "lpyacc.mly"
                             ( makeConst "nil" )
# 1515 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    Obj.repr(
# 431 "lpyacc.mly"
                             ( ListTerm(List.rev _2, getPos 1) )
# 1522 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Preabsyn.pterm list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    Obj.repr(
# 434 "lpyacc.mly"
      ( ConsTerm(List.rev _2, SeqTerm(List.rev _4, getPos 4), getPos 1) )
# 1530 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 436 "lpyacc.mly"
                             ( Errormsg.error (getPos 1)
                                 "Unmatched parenthesis starting here" ;
                               ErrorTerm )
# 1538 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 439 "lpyacc.mly"
                             ( Errormsg.error (getPos 1)
                                 "Unmatched bracket starting here" ;
                               ErrorTerm )
# 1546 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)) in
    Obj.repr(
# 444 "lpyacc.mly"
                             ( IdTerm _1 )
# 1553 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 445 "lpyacc.mly"
                             ( _1 )
# 1560 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 447 "lpyacc.mly"
                             ( IdTerm (makeTuple _1) )
# 1567 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (string * Preabsyn.pidkind)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 448 "lpyacc.mly"
                             ( IdTerm (makeTuple ~ty:_3 _1) )
# 1575 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 450 "lpyacc.mly"
                             ( makeConst "!" )
# 1581 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 451 "lpyacc.mly"
                             ( makeConst ";" )
# 1587 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 452 "lpyacc.mly"
                             ( makeConst "&" )
# 1593 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 453 "lpyacc.mly"
                             ( makeConst "/" )
# 1599 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 454 "lpyacc.mly"
                             ( makeConst "," )
# 1605 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 455 "lpyacc.mly"
                             ( makeConst "+" )
# 1611 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 456 "lpyacc.mly"
                             ( makeConst "-" )
# 1617 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 457 "lpyacc.mly"
                             ( makeConst "*" )
# 1623 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 458 "lpyacc.mly"
                             ( makeConst "<" )
# 1629 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 459 "lpyacc.mly"
                             ( makeConst "<=" )
# 1635 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 460 "lpyacc.mly"
                             ( makeConst ">" )
# 1641 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 461 "lpyacc.mly"
                             ( makeConst ">=" )
# 1647 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 462 "lpyacc.mly"
                             ( makeConst "~" )
# 1653 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 463 "lpyacc.mly"
                             ( makeConst ":-" )
# 1659 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 464 "lpyacc.mly"
                             ( makeConst "=>" )
# 1665 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 466 "lpyacc.mly"
                             ( RealTerm(_1, getPos 1) )
# 1672 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 467 "lpyacc.mly"
                             ( IntTerm(_1, getPos 1) )
# 1679 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 468 "lpyacc.mly"
                             ( StringTerm(_1, getPos 1) )
# 1686 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 471 "lpyacc.mly"
                             ( makeConst "pi" )
# 1692 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 472 "lpyacc.mly"
                             ( makeConst "sigma" )
# 1698 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 473 "lpyacc.mly"
                             ( makeConst "nil" )
# 1704 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 474 "lpyacc.mly"
                             ( makeConst "::" )
# 1710 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 475 "lpyacc.mly"
                             ( makeConst "=" )
# 1716 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 477 "lpyacc.mly"
                             ( makeConst ~ty:_3 "pi" )
# 1723 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 478 "lpyacc.mly"
                             ( makeConst ~ty:_3 "sigma" )
# 1730 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 479 "lpyacc.mly"
                             ( makeConst ~ty:_3 "nil" )
# 1737 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 480 "lpyacc.mly"
                             ( makeConst ~ty:_3 "::" )
# 1744 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 481 "lpyacc.mly"
                             ( makeConst ~ty:_3 "=" )
# 1751 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 484 "lpyacc.mly"
                             ( makeTuple _1 )
# 1758 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 485 "lpyacc.mly"
                             ( makeTuple _1 )
# 1765 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 486 "lpyacc.mly"
                             ( makeTuple _1 )
# 1772 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (string * Preabsyn.pidkind)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 488 "lpyacc.mly"
                             ( makeTuple ~ty:_3 _1 )
# 1780 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (string * Preabsyn.pidkind)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 489 "lpyacc.mly"
                             ( makeTuple ~ty:_3 _1 )
# 1788 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (string * Preabsyn.pidkind)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 490 "lpyacc.mly"
                             ( makeTuple ~ty:_3 _1 )
# 1796 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
(* Entry parseModule *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parseSignature *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parseModClause *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let parseModule (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Preabsyn.pmodule)
let parseSignature (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Preabsyn.pmodule)
let parseModClause (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Preabsyn.pterm)
