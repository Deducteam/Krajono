type token =
  | MODULE
  | END
  | IMPORT
  | ACCUMULATE
  | ACCUMSIG
  | USESIG
  | LOCAL
  | LOCALKIND
  | CLOSED
  | SIG
  | KIND
  | TYPE
  | TYPEABBREV
  | EXPORTDEF
  | USEONLY
  | INFIXL
  | INFIX
  | INFIXR
  | PREFIX
  | PREFIXR
  | POSTFIX
  | POSTFIXL
  | COLONDASH
  | IMPLIES
  | INFIXLAMBDA
  | TYARROW
  | CUT
  | PI
  | SIGMA
  | COMMA
  | SEMICOLON
  | AMPAND
  | RDIVIDE
  | NILLIST
  | LISTCONS
  | EQUAL
  | PLUS
  | MINUS
  | TIMES
  | LESS
  | LEQ
  | GTR
  | GEQ
  | UMINUS
  | PERIOD
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | COLON
  | VBAR
  | EOF
  | ID of ((string * Preabsyn.pidkind))
  | SYID of ((string * Preabsyn.pidkind))
  | VID of ((string * Preabsyn.pidkind))
  | UPCID of ((string * Preabsyn.pidkind))
  | STRLIT of (string)
  | INTLIT of (int)
  | REALLIT of (float)

open Parsing;;
let _ = parse_error;;
# 2 "lpyacc.mly"
(****************************************************************************
*Copyright 2008
*  Andrew Gacek, Steven Holte, Gopalan Nadathur, Xiaochu Qi, Zach Snow
****************************************************************************)
(****************************************************************************
* This file is part of Teyjus.
*
* Teyjus is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Teyjus is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with Teyjus.  If not, see <http://www.gnu.org/licenses/>.
****************************************************************************)

(****************************************************************************
*lpyacc.mly:
* This file contains the Teyjus ocamlyacc specification.  The semantic
* actions are more or less correct...
****************************************************************************)

(****************************************************************************
* Shift/Reduce Conflicts
*   This grammar has 6 shift/reduce conflicts, which can be examined by
*   running ocamlyacc with the -v flag. These conflicts comes from two
*   sources: error handling and typing. The conflicts due to error handling
*   are benign. The conflicts from typing stem from trying to parse the
*   string "A : B C". This string can be interpreted as a term A with type
*   B C or as a term A with type B where A is applied to term C. In order to
*   agree with the previous Teyjus grammar, we choose the first
*   interpretation. In terms of shift/reduce conflicts, this coincides with
*   the grammar's choice to shift rather than reduce after reading "A : B".
****************************************************************************)
open Lexing
open Preabsyn

let basename () =
  Filename.chop_extension (Filename.basename (symbol_start_pos ()).pos_fname)

type pos = Errormsg.pos

let maxPrecedence = 255

(**********************************************************************
* These data structures are the result of parsing a signature or
* module.  If a signature is parsed, the appropriate structures are
* placed in a Preabsyn.Signature structure and returned.  If a module
* is parsed, the data is placed in a Preabsyn.Module.
**********************************************************************)
let importedModList = ref []
let accumulatedModList = ref []
let accumulatedSigList = ref []
let useSigList = ref []
let useOnlyList = ref []
let exportList = ref []
let clauseList = ref []

let globalConstants = ref []
let closedConstants = ref []
let localConstants = ref []

let globalKinds = ref []
let localKinds = ref []

let globalTypeAbbrevs = ref []

let fixityList = ref []

let reverseResults () =
  importedModList := List.rev !importedModList;
  accumulatedModList := List.rev !accumulatedModList;
  accumulatedSigList := List.rev !accumulatedSigList;
  useSigList := List.rev !useSigList;
  clauseList := List.rev !clauseList;

  globalConstants := !globalConstants;
  closedConstants := !closedConstants;
  localConstants := !localConstants;
  useOnlyList := !useOnlyList;
  exportList := !exportList;
  
  globalKinds := !globalKinds;
  localKinds := !localKinds;

  globalTypeAbbrevs := List.rev !globalTypeAbbrevs;

  fixityList := List.rev !fixityList

let clearResults () =
  importedModList := [];
  accumulatedModList := [];
  accumulatedSigList := [];
  useSigList := [];
  useOnlyList := [];
  exportList := [];
  clauseList := [];

  globalConstants := [];
  closedConstants := [];
  localConstants := [];

  globalKinds := [];
  localKinds := [];

  globalTypeAbbrevs := [];

  fixityList := []

(**********************************************************************
*getPos:
* Gets the character position of the given token.
**********************************************************************)
let getPos i =
  Parsing.rhs_start_pos i

(* Accessors for IDs  *)
let getIDName (name, _) = name
let getIDKind (_, kind) = kind

let genericError str =
  Errormsg.error (getPos 1) ("Unexpected input while parsing " ^ str)

let makeSymbol (name, kind) =
  Symbol(Symbol.symbol name, kind, getPos 1)

let makeTuple ?ty (name, kind) =
  (Symbol.symbol name, ty, kind, getPos 1)
      
let makeConst ?ty sym =
  IdTerm(Symbol.symbol sym, ty, ConstID, getPos 1)

let makeAbsSymbol (sym, typ_opt, _, pos) = 
  AbstractedSymbol(sym, typ_opt, pos) 
      
let makeModule () =
  reverseResults () ;
  let m = Module(basename (), !globalConstants, !localConstants,
                 !closedConstants, !useOnlyList, !exportList, !fixityList,
                 !globalKinds, !localKinds, !globalTypeAbbrevs,
                 !clauseList, !accumulatedModList, !accumulatedSigList,
                 !useSigList, !importedModList) in
    clearResults () ;
    m

let makeSignature () =
  reverseResults ();
  let s = Signature(basename (), !globalConstants, !useOnlyList, !exportList,
                    !globalKinds, !globalTypeAbbrevs, !fixityList,
                    !accumulatedSigList, !useSigList) in
    clearResults ();
    s

(********************************************************************
*errorEof:
* Prints an error occuring before the end of the file, 
* along with the line and character position.
********************************************************************)
let errorEof pos msg =
    Errormsg.error {pos with pos_lnum = pos.pos_lnum - 1} msg

# 232 "lpyacc.ml"
let yytransl_const = [|
  257 (* MODULE *);
  258 (* END *);
  259 (* IMPORT *);
  260 (* ACCUMULATE *);
  261 (* ACCUMSIG *);
  262 (* USESIG *);
  263 (* LOCAL *);
  264 (* LOCALKIND *);
  265 (* CLOSED *);
  266 (* SIG *);
  267 (* KIND *);
  268 (* TYPE *);
  269 (* TYPEABBREV *);
  270 (* EXPORTDEF *);
  271 (* USEONLY *);
  272 (* INFIXL *);
  273 (* INFIX *);
  274 (* INFIXR *);
  275 (* PREFIX *);
  276 (* PREFIXR *);
  277 (* POSTFIX *);
  278 (* POSTFIXL *);
  279 (* COLONDASH *);
  280 (* IMPLIES *);
  281 (* INFIXLAMBDA *);
  282 (* TYARROW *);
  283 (* CUT *);
  284 (* PI *);
  285 (* SIGMA *);
  286 (* COMMA *);
  287 (* SEMICOLON *);
  288 (* AMPAND *);
  289 (* RDIVIDE *);
  290 (* NILLIST *);
  291 (* LISTCONS *);
  292 (* EQUAL *);
  293 (* PLUS *);
  294 (* MINUS *);
  295 (* TIMES *);
  296 (* LESS *);
  297 (* LEQ *);
  298 (* GTR *);
  299 (* GEQ *);
  300 (* UMINUS *);
  301 (* PERIOD *);
  302 (* LPAREN *);
  303 (* RPAREN *);
  304 (* LBRACK *);
  305 (* RBRACK *);
  306 (* COLON *);
  307 (* VBAR *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  308 (* ID *);
  309 (* SYID *);
  310 (* VID *);
  311 (* UPCID *);
  312 (* STRLIT *);
  313 (* INTLIT *);
  314 (* REALLIT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\025\000\025\000\025\000\025\000\
\004\000\005\000\006\000\006\000\006\000\007\000\007\000\007\000\
\008\000\008\000\008\000\008\000\008\000\027\000\027\000\027\000\
\014\000\014\000\014\000\014\000\013\000\013\000\013\000\013\000\
\009\000\009\000\009\000\011\000\011\000\012\000\012\000\012\000\
\012\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\010\000\010\000\010\000\030\000\030\000\
\030\000\030\000\030\000\030\000\015\000\015\000\031\000\031\000\
\032\000\032\000\016\000\016\000\017\000\017\000\018\000\018\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\003\000\
\003\000\003\000\003\000\020\000\020\000\021\000\021\000\029\000\
\029\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\026\000\026\000\026\000\026\000\026\000\026\000\000\000\000\000\
\000\000"

let yylen = "\002\000\
\004\000\001\000\004\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\000\000\001\000\001\000\000\000\001\000\001\000\
\000\000\004\000\004\000\004\000\004\000\000\000\004\000\004\000\
\001\000\003\000\003\000\003\000\001\000\001\000\003\000\003\000\
\000\000\002\000\002\000\000\000\002\000\002\000\002\000\002\000\
\002\000\003\000\003\000\006\000\005\000\003\000\003\000\002\000\
\003\000\002\000\003\000\002\000\002\000\002\000\002\000\003\000\
\002\000\003\000\002\000\003\000\001\000\001\000\003\000\003\000\
\001\000\003\000\003\000\001\000\001\000\002\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\002\000\002\000\002\000\001\000\002\000\001\000\003\000\001\000\
\002\000\001\000\003\000\002\000\003\000\005\000\002\000\002\000\
\001\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\001\000\001\000\001\000\003\000\003\000\003\000\002\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\002\000\000\000\135\000\017\000\
\004\000\000\000\136\000\022\000\000\000\114\000\115\000\101\000\
\000\000\000\000\105\000\102\000\103\000\104\000\000\000\000\000\
\000\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\000\000\000\000\000\000\000\000\000\000\000\000\118\000\
\117\000\116\000\137\000\000\000\084\000\086\000\090\000\098\000\
\000\000\005\000\007\000\008\000\006\000\000\000\000\000\000\000\
\000\000\081\000\083\000\000\000\000\000\000\000\000\000\000\000\
\095\000\000\000\096\000\092\000\000\000\000\000\000\000\000\000\
\000\000\080\000\082\000\085\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\124\000\000\000\069\000\071\000\125\000\126\000\127\000\128\000\
\091\000\093\000\000\000\132\000\134\000\100\000\133\000\000\000\
\000\000\025\000\000\000\000\000\000\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\074\000\073\000\
\075\000\076\000\077\000\078\000\079\000\013\000\035\000\001\000\
\034\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\016\000\003\000\037\000\000\000\000\000\000\000\070\000\000\000\
\000\000\018\000\019\000\020\000\021\000\029\000\030\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\000\053\000\052\000\024\000\023\000\040\000\039\000\
\041\000\038\000\072\000\067\000\094\000\026\000\028\000\027\000\
\000\000\056\000\065\000\000\000\058\000\061\000\000\000\060\000\
\042\000\043\000\000\000\046\000\049\000\051\000\047\000\031\000\
\032\000\000\000\000\000\000\000\000\000\088\000\000\000\063\000\
\066\000\064\000\045\000\000\000\089\000\044\000"

let yydgoto = "\004\000\
\007\000\011\000\043\000\008\000\012\000\128\000\138\000\055\000\
\083\000\129\000\087\000\139\000\152\000\105\000\181\000\089\000\
\090\000\091\000\130\000\044\000\045\000\046\000\047\000\048\000\
\092\000\049\000\057\000\131\000\199\000\132\000\182\000\183\000"

let yysindex = "\146\000\
\065\255\054\255\077\002\000\000\000\000\037\255\000\000\000\000\
\000\000\037\255\000\000\000\000\006\000\000\000\000\000\000\000\
\240\254\009\255\000\000\000\000\000\000\000\000\056\255\066\255\
\068\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\122\002\178\255\072\255\081\255\100\255\102\255\000\000\
\000\000\000\000\000\000\218\001\000\000\000\000\000\000\000\000\
\079\255\000\000\000\000\000\000\000\000\064\255\140\255\070\255\
\089\255\000\000\000\000\059\255\059\255\059\255\059\255\059\255\
\000\000\194\002\000\000\000\000\158\002\059\255\059\255\059\255\
\059\255\000\000\000\000\000\000\010\003\000\000\037\255\037\255\
\037\255\037\255\060\000\000\000\037\255\037\255\076\002\059\255\
\000\000\252\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\003\000\000\000\000\000\000\000\000\010\003\
\235\254\000\000\001\255\022\255\048\255\000\000\045\255\045\255\
\045\255\045\255\045\255\074\255\045\255\045\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\255\088\255\007\000\055\255\058\255\016\000\000\000\
\000\000\000\000\000\000\019\000\106\255\059\255\000\000\230\002\
\218\254\000\000\000\000\000\000\000\000\000\000\000\000\017\255\
\249\254\017\255\249\254\017\255\037\255\059\255\017\255\017\255\
\244\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\255\000\000\000\000\254\254\000\000\000\000\128\255\000\000\
\000\000\000\000\083\255\000\000\000\000\000\000\000\000\000\000\
\000\000\108\255\241\254\254\254\059\255\000\000\087\255\000\000\
\000\000\000\000\000\000\059\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\204\000\240\000\000\000\000\000\000\000\000\000\026\001\063\001\
\105\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\096\000\132\000\146\001\168\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\182\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\048\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\156\000\000\000\000\000\000\000\157\000\000\000\
\000\000\254\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\021\000\025\000\000\000\000\000\000\000\000\000\040\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\225\255\232\255\103\255\221\255\
\000\000\069\000\000\000\234\255\220\255\000\000\000\000\000\000\
\250\255\000\000\000\000\073\000\000\000\000\000\237\255\239\255"

let yytablesize = 1092
let yytable = "\054\000\
\033\000\185\000\062\000\056\000\179\000\059\000\164\000\076\000\
\145\000\179\000\196\000\066\000\069\000\174\000\175\000\168\000\
\176\000\177\000\170\000\055\000\057\000\142\000\177\000\146\000\
\059\000\093\000\094\000\095\000\096\000\076\000\145\000\201\000\
\076\000\060\000\100\000\101\000\102\000\103\000\180\000\048\000\
\050\000\088\000\202\000\180\000\191\000\147\000\177\000\050\000\
\051\000\052\000\053\000\145\000\141\000\009\000\104\000\107\000\
\108\000\109\000\061\000\126\000\133\000\134\000\088\000\010\000\
\005\000\006\000\148\000\076\000\050\000\051\000\052\000\053\000\
\106\000\106\000\106\000\106\000\144\000\145\000\106\000\106\000\
\153\000\154\000\155\000\156\000\145\000\159\000\160\000\145\000\
\050\000\051\000\052\000\053\000\149\000\085\000\086\000\129\000\
\150\000\151\000\161\000\165\000\192\000\193\000\166\000\077\000\
\088\000\062\000\172\000\076\000\078\000\158\000\050\000\051\000\
\052\000\053\000\084\000\063\000\178\000\064\000\184\000\157\000\
\186\000\070\000\188\000\189\000\190\000\050\000\051\000\052\000\
\053\000\197\000\071\000\131\000\162\000\204\000\050\000\051\000\
\052\000\053\000\050\000\051\000\052\000\053\000\079\000\080\000\
\081\000\082\000\001\000\002\000\003\000\072\000\187\000\073\000\
\171\000\196\000\200\000\011\000\014\000\127\000\143\000\140\000\
\194\000\203\000\195\000\000\000\000\000\000\000\000\000\130\000\
\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\000\000\000\000\198\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\015\000\000\000\119\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\000\000\034\000\
\000\000\035\000\068\000\000\000\000\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\000\000\000\000\120\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\033\000\000\000\000\000\000\000\000\000\033\000\
\033\000\033\000\000\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\121\000\000\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\000\000\033\000\062\000\
\033\000\062\000\058\000\163\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\013\000\167\000\110\000\122\000\169\000\
\055\000\057\000\111\000\112\000\113\000\059\000\114\000\115\000\
\116\000\117\000\118\000\119\000\120\000\121\000\122\000\123\000\
\124\000\125\000\014\000\015\000\048\000\050\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\123\000\034\000\000\000\035\000\000\000\000\000\000\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\129\000\129\000\
\129\000\000\000\129\000\129\000\129\000\129\000\129\000\129\000\
\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
\129\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
\129\000\099\000\129\000\129\000\129\000\129\000\129\000\129\000\
\129\000\129\000\131\000\131\000\131\000\000\000\131\000\131\000\
\131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
\131\000\131\000\131\000\131\000\131\000\131\000\131\000\131\000\
\131\000\131\000\131\000\131\000\131\000\097\000\131\000\131\000\
\131\000\131\000\131\000\131\000\131\000\131\000\130\000\130\000\
\130\000\000\000\130\000\130\000\130\000\130\000\130\000\130\000\
\130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
\130\000\130\000\130\000\130\000\130\000\130\000\130\000\130\000\
\130\000\075\000\130\000\130\000\130\000\130\000\130\000\130\000\
\130\000\130\000\119\000\119\000\000\000\000\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\068\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\120\000\120\000\
\000\000\000\000\120\000\120\000\120\000\120\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
\120\000\087\000\120\000\120\000\120\000\120\000\120\000\120\000\
\120\000\120\000\000\000\000\000\000\000\000\000\000\000\036\000\
\121\000\121\000\000\000\000\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\137\000\121\000\121\000\121\000\121\000\
\121\000\121\000\121\000\121\000\000\000\122\000\122\000\000\000\
\000\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\000\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\122\000\000\000\000\000\000\000\000\000\000\000\000\000\123\000\
\123\000\000\000\000\000\123\000\123\000\123\000\123\000\123\000\
\123\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
\123\000\123\000\123\000\123\000\123\000\123\000\123\000\123\000\
\123\000\123\000\000\000\123\000\123\000\123\000\123\000\123\000\
\123\000\123\000\123\000\000\000\000\000\000\000\000\000\000\000\
\099\000\099\000\000\000\000\000\099\000\099\000\099\000\099\000\
\099\000\099\000\099\000\099\000\099\000\099\000\099\000\099\000\
\099\000\099\000\099\000\099\000\099\000\099\000\099\000\099\000\
\099\000\099\000\099\000\000\000\099\000\099\000\099\000\099\000\
\099\000\099\000\099\000\099\000\097\000\097\000\000\000\000\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\000\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\014\000\015\000\000\000\000\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\074\000\034\000\
\000\000\035\000\000\000\000\000\000\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\068\000\068\000\068\000\000\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\000\000\068\000\068\000\068\000\036\000\
\068\000\036\000\000\000\000\000\000\000\068\000\068\000\068\000\
\000\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\000\000\000\000\
\000\000\000\000\000\000\135\000\013\000\136\000\087\000\000\000\
\087\000\000\000\087\000\000\000\087\000\000\000\114\000\115\000\
\116\000\117\000\118\000\119\000\120\000\121\000\122\000\123\000\
\124\000\125\000\000\000\014\000\015\000\000\000\000\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\029\000\030\000\031\000\032\000\
\033\000\065\000\034\000\000\000\035\000\000\000\000\000\000\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\015\000\000\000\000\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\000\000\034\000\
\000\000\035\000\000\000\000\000\000\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\014\000\015\000\000\000\000\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\032\000\033\000\000\000\034\000\000\000\035\000\098\000\000\000\
\099\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\014\000\015\000\000\000\000\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\000\000\034\000\
\097\000\035\000\000\000\000\000\000\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\014\000\015\000\000\000\000\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\029\000\030\000\031\000\
\032\000\033\000\000\000\034\000\000\000\035\000\173\000\000\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\014\000\015\000\000\000\000\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\000\000\034\000\
\000\000\035\000\000\000\000\000\000\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000"

let yycheck = "\006\000\
\000\000\155\000\000\000\010\000\012\001\000\000\000\000\044\000\
\030\001\012\001\026\001\034\000\035\000\052\001\053\001\000\000\
\055\001\030\001\000\000\000\000\000\000\026\001\030\001\045\001\
\000\000\061\000\062\000\063\000\064\000\066\000\030\001\047\001\
\069\000\050\001\070\000\071\000\072\000\073\000\046\001\000\000\
\000\000\046\001\196\000\046\001\057\001\045\001\030\001\052\001\
\053\001\054\001\055\001\030\001\088\000\000\001\077\000\080\000\
\081\000\082\000\050\001\000\000\085\000\086\000\046\001\010\001\
\000\001\001\001\045\001\104\000\052\001\053\001\054\001\055\001\
\079\000\080\000\081\000\082\000\099\000\030\001\085\000\086\000\
\112\000\113\000\114\000\115\000\030\001\117\000\118\000\030\001\
\052\001\053\001\054\001\055\001\045\001\005\001\006\001\000\000\
\052\001\053\001\130\000\045\001\052\001\053\001\045\001\025\001\
\046\001\050\001\142\000\144\000\045\001\116\000\052\001\053\001\
\054\001\055\001\045\001\050\001\152\000\050\001\154\000\046\001\
\156\000\050\001\158\000\159\000\160\000\052\001\053\001\054\001\
\055\001\047\001\050\001\000\000\045\001\047\001\052\001\053\001\
\054\001\055\001\052\001\053\001\054\001\055\001\003\001\004\001\
\005\001\006\001\001\000\002\000\003\000\050\001\157\000\050\001\
\047\001\026\001\047\001\000\000\000\000\083\000\090\000\087\000\
\180\000\197\000\180\000\255\255\255\255\255\255\255\255\000\000\
\204\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\001\255\255\255\255\187\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\199\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\255\255\000\000\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\046\001\
\255\255\048\001\049\001\255\255\255\255\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\001\255\255\002\001\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\000\000\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\046\001\045\001\
\048\001\047\001\045\001\045\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\000\001\045\001\002\001\000\000\045\001\
\045\001\045\001\007\001\008\001\009\001\045\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\045\001\045\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\000\000\046\001\255\255\048\001\255\255\255\255\255\255\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\023\001\024\001\
\025\001\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\000\000\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\023\001\024\001\025\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\000\000\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\023\001\024\001\
\025\001\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\000\000\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\023\001\024\001\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\000\000\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\023\001\024\001\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\000\000\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\255\255\255\255\255\255\255\255\255\255\000\000\
\023\001\024\001\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\000\000\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\255\255\023\001\024\001\255\255\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\255\255\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\023\001\024\001\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\023\001\024\001\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\255\255\048\001\255\255\255\255\255\255\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\255\255\047\001\048\001\049\001\000\001\
\051\001\002\001\255\255\255\255\255\255\056\001\057\001\058\001\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\255\255\255\255\000\001\000\001\002\001\045\001\255\255\
\047\001\255\255\049\001\255\255\051\001\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\023\001\024\001\255\255\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\000\001\046\001\255\255\048\001\255\255\255\255\255\255\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\046\001\
\255\255\048\001\255\255\255\255\255\255\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\023\001\024\001\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\255\255\046\001\255\255\048\001\049\001\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\023\001\024\001\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\046\001\
\047\001\048\001\255\255\255\255\255\255\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\023\001\024\001\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\255\255\046\001\255\255\048\001\049\001\255\255\
\255\255\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\023\001\024\001\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\046\001\
\255\255\048\001\255\255\255\255\255\255\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001"

let yynames_const = "\
  MODULE\000\
  END\000\
  IMPORT\000\
  ACCUMULATE\000\
  ACCUMSIG\000\
  USESIG\000\
  LOCAL\000\
  LOCALKIND\000\
  CLOSED\000\
  SIG\000\
  KIND\000\
  TYPE\000\
  TYPEABBREV\000\
  EXPORTDEF\000\
  USEONLY\000\
  INFIXL\000\
  INFIX\000\
  INFIXR\000\
  PREFIX\000\
  PREFIXR\000\
  POSTFIX\000\
  POSTFIXL\000\
  COLONDASH\000\
  IMPLIES\000\
  INFIXLAMBDA\000\
  TYARROW\000\
  CUT\000\
  PI\000\
  SIGMA\000\
  COMMA\000\
  SEMICOLON\000\
  AMPAND\000\
  RDIVIDE\000\
  NILLIST\000\
  LISTCONS\000\
  EQUAL\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  LESS\000\
  LEQ\000\
  GTR\000\
  GEQ\000\
  UMINUS\000\
  PERIOD\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  COLON\000\
  VBAR\000\
  EOF\000\
  "

let yynames_block = "\
  ID\000\
  SYID\000\
  VID\000\
  UPCID\000\
  STRLIT\000\
  INTLIT\000\
  REALLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 215 "lpyacc.mly"
                                                ( makeModule () )
# 788 "lpyacc.ml"
               : Preabsyn.pmodule))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "lpyacc.mly"
                                                ( genericError "module" ;
                                                  makeModule () )
# 795 "lpyacc.ml"
               : Preabsyn.pmodule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'sigpreamble) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 219 "lpyacc.mly"
                                                ( makeSignature () )
# 805 "lpyacc.ml"
               : Preabsyn.pmodule))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "lpyacc.mly"
                                                ( genericError "signature" ;
                                                  makeSignature () )
# 812 "lpyacc.ml"
               : Preabsyn.pmodule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 224 "lpyacc.mly"
                              ( _1 )
# 819 "lpyacc.ml"
               : (string * Preabsyn.pidkind)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 225 "lpyacc.mly"
                              ( _1 )
# 826 "lpyacc.ml"
               : (string * Preabsyn.pidkind)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 226 "lpyacc.mly"
                              ( _1 )
# 833 "lpyacc.ml"
               : (string * Preabsyn.pidkind)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 227 "lpyacc.mly"
                              ( _1 )
# 840 "lpyacc.ml"
               : (string * Preabsyn.pidkind)))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 231 "lpyacc.mly"
      ( if getIDName _2 <> basename () then
          Errormsg.error (getPos 2)
            ("Expected module name '" ^ basename () ^
            "', found module name '" ^ (getIDName _2) ^ "'.") )
# 850 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 238 "lpyacc.mly"
      ( if getIDName _2 <> basename () then
          Errormsg.error (getPos 2)
            ("Expected signature name '" ^ basename () ^ "'.") )
# 859 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 243 "lpyacc.mly"
                              (  )
# 865 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 244 "lpyacc.mly"
                              (  )
# 871 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 245 "lpyacc.mly"
                              (  )
# 877 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "lpyacc.mly"
                              (  )
# 883 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "lpyacc.mly"
                              (  )
# 889 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 250 "lpyacc.mly"
                              (  )
# 895 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 253 "lpyacc.mly"
                              (  )
# 901 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 256 "lpyacc.mly"
      ( importedModList := _3 @ !importedModList )
# 909 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 259 "lpyacc.mly"
      ( accumulatedModList := _3 @ !accumulatedModList )
# 917 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 262 "lpyacc.mly"
      ( accumulatedSigList := _3 @ !accumulatedSigList )
# 925 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 265 "lpyacc.mly"
      ( useSigList := _3 @ !useSigList )
# 933 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "lpyacc.mly"
                              (  )
# 939 "lpyacc.ml"
               : 'sigpreamble))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'sigpreamble) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 271 "lpyacc.mly"
      ( useSigList := _3 @ !useSigList )
# 947 "lpyacc.ml"
               : 'sigpreamble))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'sigpreamble) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    Obj.repr(
# 274 "lpyacc.mly"
      ( accumulatedSigList := _3 @ !accumulatedSigList )
# 955 "lpyacc.ml"
               : 'sigpreamble))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 277 "lpyacc.mly"
                              ( (makeSymbol _1) :: [] )
# 962 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 278 "lpyacc.mly"
                              ( (makeSymbol _3) :: _1 )
# 970 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 279 "lpyacc.mly"
                              ( (makeSymbol _3) :: _1 )
# 978 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 280 "lpyacc.mly"
                              ( (makeSymbol _3) :: _1 )
# 986 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 284 "lpyacc.mly"
                              ( (makeSymbol _1) :: [] )
# 993 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 285 "lpyacc.mly"
                              ( (makeSymbol _1) :: [] )
# 1000 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 286 "lpyacc.mly"
                              ( (makeSymbol _3) :: _1 )
# 1008 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 287 "lpyacc.mly"
                              ( (makeSymbol _3) :: _1 )
# 1016 "lpyacc.ml"
               : Preabsyn.psymbol list))
; (fun __caml_parser_env ->
    Obj.repr(
# 290 "lpyacc.mly"
                              (  )
# 1022 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 291 "lpyacc.mly"
                              (  )
# 1030 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 292 "lpyacc.mly"
                              (  )
# 1038 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 295 "lpyacc.mly"
                              (  )
# 1044 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : unit) in
    Obj.repr(
# 296 "lpyacc.mly"
                              (  )
# 1052 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'signdeclaux) in
    Obj.repr(
# 299 "lpyacc.mly"
                              ( Errormsg.error (getPos 1)
                                "Type declaration never terminated" )
# 1060 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 301 "lpyacc.mly"
                              ( errorEof (getPos 1)
                                 "Incorrect type declaration never terminated" )
# 1067 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 303 "lpyacc.mly"
                              ( genericError "type" )
# 1073 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'signdeclaux) in
    Obj.repr(
# 304 "lpyacc.mly"
                              (  )
# 1080 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 308 "lpyacc.mly"
      ( globalKinds := Kind(_2, Some _3, getPos 1) :: !globalKinds )
# 1088 "lpyacc.ml"
               : 'signdeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 311 "lpyacc.mly"
      ( globalConstants := Constant(_2, Some _3, getPos 1) :: !globalConstants )
# 1096 "lpyacc.ml"
               : 'signdeclaux))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : (string * Preabsyn.pidkind)) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arglist) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 314 "lpyacc.mly"
      ( globalTypeAbbrevs :=
          TypeAbbrev(makeSymbol _3, (List.map makeSymbol _4), _6, getPos 1) ::
            !globalTypeAbbrevs )
# 1107 "lpyacc.ml"
               : 'signdeclaux))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : (string * Preabsyn.pidkind)) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 319 "lpyacc.mly"
      ( globalTypeAbbrevs :=
          TypeAbbrev(makeSymbol _3, [], _5, getPos 1) :: !globalTypeAbbrevs )
# 1116 "lpyacc.ml"
               : 'signdeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (string * Preabsyn.pidkind)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 323 "lpyacc.mly"
      ( globalTypeAbbrevs :=
          TypeAbbrev(makeSymbol _2, [], _3, getPos 1) :: !globalTypeAbbrevs )
# 1125 "lpyacc.ml"
               : 'signdeclaux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.pfixitykind) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 327 "lpyacc.mly"
      ( if _3 < 0 || _3 > maxPrecedence then
          Errormsg.error (getPos 1)
            ("Precedence must be between 0 and " ^ (string_of_int _3) ^ ".")
        else
          fixityList := Fixity(_2, _1, _3, getFixityPos _1) :: !fixityList )
# 1138 "lpyacc.ml"
               : 'signdeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.psymbol list) in
    Obj.repr(
# 334 "lpyacc.mly"
      ( exportList := Constant(_2, None, getPos 1) :: !exportList )
# 1145 "lpyacc.ml"
               : 'signdeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 337 "lpyacc.mly"
      ( exportList := Constant(_2, Some _3, getPos 1) :: !exportList )
# 1153 "lpyacc.ml"
               : 'signdeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.psymbol list) in
    Obj.repr(
# 340 "lpyacc.mly"
      ( useOnlyList := Constant(_2, None, getPos 1) :: !useOnlyList )
# 1160 "lpyacc.ml"
               : 'signdeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 343 "lpyacc.mly"
      ( useOnlyList := Constant(_2, Some _3, getPos 1) :: !useOnlyList )
# 1168 "lpyacc.ml"
               : 'signdeclaux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'modsigndeclaux) in
    Obj.repr(
# 346 "lpyacc.mly"
                                (Errormsg.error (getPos 1)
                                   "Type declaration never terminated" )
# 1176 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'modsigndeclaux) in
    Obj.repr(
# 348 "lpyacc.mly"
                                ()
# 1183 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'signdeclaux) in
    Obj.repr(
# 349 "lpyacc.mly"
                       (  )
# 1190 "lpyacc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.psymbol list) in
    Obj.repr(
# 353 "lpyacc.mly"
      ( localConstants := Constant(_2, None, getPos 1) :: !localConstants )
# 1197 "lpyacc.ml"
               : 'modsigndeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 356 "lpyacc.mly"
      ( localConstants := Constant(_2, Some _3, getPos 1) :: !localConstants )
# 1205 "lpyacc.ml"
               : 'modsigndeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.psymbol list) in
    Obj.repr(
# 359 "lpyacc.mly"
      ( localKinds := Kind(_2, None, getPos 1) :: !localKinds )
# 1212 "lpyacc.ml"
               : 'modsigndeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 362 "lpyacc.mly"
      ( localKinds := Kind(_2, Some _3, getPos 1) :: !localKinds )
# 1220 "lpyacc.ml"
               : 'modsigndeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.psymbol list) in
    Obj.repr(
# 365 "lpyacc.mly"
      ( closedConstants := Constant(_2, None, getPos 1) :: !closedConstants )
# 1227 "lpyacc.ml"
               : 'modsigndeclaux))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.psymbol list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 368 "lpyacc.mly"
      ( closedConstants := Constant(_2, Some _3, getPos 1) :: !closedConstants )
# 1235 "lpyacc.ml"
               : 'modsigndeclaux))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'kind_arrow) in
    Obj.repr(
# 371 "lpyacc.mly"
                              ( _1 )
# 1242 "lpyacc.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_type) in
    Obj.repr(
# 372 "lpyacc.mly"
                              ( 0 )
# 1249 "lpyacc.ml"
               : int))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'kind_arrow) in
    Obj.repr(
# 375 "lpyacc.mly"
                                  ( _2 )
# 1256 "lpyacc.ml"
               : 'kind_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'paren_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 376 "lpyacc.mly"
                              ( _3 + 1 )
# 1264 "lpyacc.ml"
               : 'kind_arrow))
; (fun __caml_parser_env ->
    Obj.repr(
# 379 "lpyacc.mly"
                              (())
# 1270 "lpyacc.ml"
               : 'paren_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'paren_type) in
    Obj.repr(
# 380 "lpyacc.mly"
                              (())
# 1277 "lpyacc.ml"
               : 'paren_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Preabsyn.ptype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 383 "lpyacc.mly"
                             ( Arrow(_1, _3, getPos 1) )
# 1285 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 384 "lpyacc.mly"
                             ( _1 )
# 1292 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 387 "lpyacc.mly"
                             ( _1 )
# 1299 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 388 "lpyacc.mly"
                             ( App(_1, _2, getPos 1) )
# 1307 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 391 "lpyacc.mly"
                             ( Atom(Symbol.symbol (getIDName _1),
                                    getIDKind _1, getPos 1) )
# 1315 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.ptype) in
    Obj.repr(
# 393 "lpyacc.mly"
                             ( _2 )
# 1322 "lpyacc.ml"
               : Preabsyn.ptype))
; (fun __caml_parser_env ->
    Obj.repr(
# 396 "lpyacc.mly"
                             ( Infix(getPos 1) )
# 1328 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 397 "lpyacc.mly"
                             ( Infixl(getPos 1) )
# 1334 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 398 "lpyacc.mly"
                             ( Infixr(getPos 1) )
# 1340 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 399 "lpyacc.mly"
                             ( Prefix(getPos 1) )
# 1346 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 400 "lpyacc.mly"
                             ( Prefixr(getPos 1) )
# 1352 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 401 "lpyacc.mly"
                             ( Postfix(getPos 1) )
# 1358 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    Obj.repr(
# 402 "lpyacc.mly"
                             ( Postfixl(getPos 1) )
# 1364 "lpyacc.ml"
               : Preabsyn.pfixitykind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    Obj.repr(
# 405 "lpyacc.mly"
                             ( let pt = SeqTerm(List.rev _1, (getPos 1)) in
                                 clauseList := Clause(pt) :: !clauseList ;
                                 pt )
# 1373 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 408 "lpyacc.mly"
                             ( genericError "expression" ; ErrorTerm )
# 1379 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    Obj.repr(
# 410 "lpyacc.mly"
                             ( Errormsg.error (getPos 1)
                                 "Clause never terminated" ;
                               ErrorTerm )
# 1388 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 414 "lpyacc.mly"
                             ( errorEof (getPos 1)
                                 "Incorrect clause never terminated" ;
                               ErrorTerm )
# 1396 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 419 "lpyacc.mly"
                             ( _1 :: [] )
# 1403 "lpyacc.ml"
               : Preabsyn.pterm list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 420 "lpyacc.mly"
                             ( _2 :: _1 )
# 1411 "lpyacc.ml"
               : Preabsyn.pterm list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 423 "lpyacc.mly"
                             ( _1 )
# 1418 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm list) in
    Obj.repr(
# 426 "lpyacc.mly"
      ( LambdaTerm(makeAbsSymbol _1, List.rev _3, getPos 1) )
# 1426 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 429 "lpyacc.mly"
                             ( _1 :: [] )
# 1433 "lpyacc.ml"
               : 'arglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'arglist) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 430 "lpyacc.mly"
                             ( _2 :: _1 )
# 1441 "lpyacc.ml"
               : 'arglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 433 "lpyacc.mly"
                             ( _1 )
# 1448 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    Obj.repr(
# 434 "lpyacc.mly"
                             ( SeqTerm(List.rev _2, getPos 2) )
# 1455 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 436 "lpyacc.mly"
                             ( makeConst "nil" )
# 1461 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    Obj.repr(
# 437 "lpyacc.mly"
                             ( ListTerm(List.rev _2, getPos 1) )
# 1468 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Preabsyn.pterm list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Preabsyn.pterm list) in
    Obj.repr(
# 440 "lpyacc.mly"
      ( ConsTerm(List.rev _2, SeqTerm(List.rev _4, getPos 4), getPos 1) )
# 1476 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 442 "lpyacc.mly"
                             ( Errormsg.error (getPos 1)
                                 "Unmatched parenthesis starting here" ;
                               ErrorTerm )
# 1484 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 445 "lpyacc.mly"
                             ( Errormsg.error (getPos 1)
                                 "Unmatched bracket starting here" ;
                               ErrorTerm )
# 1492 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)) in
    Obj.repr(
# 450 "lpyacc.mly"
                             ( IdTerm _1 )
# 1499 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.pterm) in
    Obj.repr(
# 451 "lpyacc.mly"
                             ( _1 )
# 1506 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 453 "lpyacc.mly"
                             ( IdTerm (makeTuple _1) )
# 1513 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (string * Preabsyn.pidkind)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 454 "lpyacc.mly"
                             ( IdTerm (makeTuple ~ty:_3 _1) )
# 1521 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 456 "lpyacc.mly"
                             ( makeConst "!" )
# 1527 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 457 "lpyacc.mly"
                             ( makeConst ";" )
# 1533 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 458 "lpyacc.mly"
                             ( makeConst "&" )
# 1539 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 459 "lpyacc.mly"
                             ( makeConst "/" )
# 1545 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 460 "lpyacc.mly"
                             ( makeConst "," )
# 1551 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 461 "lpyacc.mly"
                             ( makeConst "+" )
# 1557 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 462 "lpyacc.mly"
                             ( makeConst "-" )
# 1563 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 463 "lpyacc.mly"
                             ( makeConst "*" )
# 1569 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 464 "lpyacc.mly"
                             ( makeConst "<" )
# 1575 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 465 "lpyacc.mly"
                             ( makeConst "<=" )
# 1581 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 466 "lpyacc.mly"
                             ( makeConst ">" )
# 1587 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 467 "lpyacc.mly"
                             ( makeConst ">=" )
# 1593 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 468 "lpyacc.mly"
                             ( makeConst "~" )
# 1599 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 469 "lpyacc.mly"
                             ( makeConst ":-" )
# 1605 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 470 "lpyacc.mly"
                             ( makeConst "=>" )
# 1611 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 472 "lpyacc.mly"
                             ( RealTerm(_1, getPos 1) )
# 1618 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 473 "lpyacc.mly"
                             ( IntTerm(_1, getPos 1) )
# 1625 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 474 "lpyacc.mly"
                             ( StringTerm(_1, getPos 1) )
# 1632 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 477 "lpyacc.mly"
                             ( makeConst "pi" )
# 1638 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 478 "lpyacc.mly"
                             ( makeConst "sigma" )
# 1644 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 479 "lpyacc.mly"
                             ( makeConst "nil" )
# 1650 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 480 "lpyacc.mly"
                             ( makeConst "::" )
# 1656 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    Obj.repr(
# 481 "lpyacc.mly"
                             ( makeConst "=" )
# 1662 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 483 "lpyacc.mly"
                             ( makeConst ~ty:_3 "pi" )
# 1669 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 484 "lpyacc.mly"
                             ( makeConst ~ty:_3 "sigma" )
# 1676 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 485 "lpyacc.mly"
                             ( makeConst ~ty:_3 "nil" )
# 1683 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 486 "lpyacc.mly"
                             ( makeConst ~ty:_3 "::" )
# 1690 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 487 "lpyacc.mly"
                             ( makeConst ~ty:_3 "=" )
# 1697 "lpyacc.ml"
               : Preabsyn.pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 490 "lpyacc.mly"
                             ( makeTuple _1 )
# 1704 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 491 "lpyacc.mly"
                             ( makeTuple _1 )
# 1711 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (string * Preabsyn.pidkind)) in
    Obj.repr(
# 492 "lpyacc.mly"
                             ( makeTuple _1 )
# 1718 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (string * Preabsyn.pidkind)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 494 "lpyacc.mly"
                             ( makeTuple ~ty:_3 _1 )
# 1726 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (string * Preabsyn.pidkind)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 495 "lpyacc.mly"
                             ( makeTuple ~ty:_3 _1 )
# 1734 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : (string * Preabsyn.pidkind)) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Preabsyn.ptype) in
    Obj.repr(
# 496 "lpyacc.mly"
                             ( makeTuple ~ty:_3 _1 )
# 1742 "lpyacc.ml"
               : (Symbol.symbol * Preabsyn.ptype option * Preabsyn.pidkind * pos)))
(* Entry parseModule *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parseSignature *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry parseModClause *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let parseModule (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Preabsyn.pmodule)
let parseSignature (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Preabsyn.pmodule)
let parseModClause (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Preabsyn.pterm)
