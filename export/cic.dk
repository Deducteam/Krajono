#NAME cic.

Nat : Type.

z : Nat.
s : Nat -> Nat.

def m : Nat -> Nat -> Nat.
[i] m i z --> i.
[j] m z j --> j.
[i, j] m (s i) (s j) --> s (m i j).

(; Sorts ;)

Sort : Type.

prop : Sort.
type : Nat -> Sort.

(; Universe successors ;)
def succ : Sort -> Sort.
[] succ prop --> type z.
[i] succ (type i) --> type (s i).

(; Universe product rules ;)
def rule : Sort -> Sort -> Sort.
[s1] rule s1 prop --> prop.
[s2] rule prop s2 --> s2.
[i, j] rule (type i) (type j) --> type (m i j).

def max : Sort -> Sort -> Sort.
[s1] max s1 prop --> s1.
[s2] max prop s2 --> s2.
[i, j] max (type i) (type j) --> type (m i j).

[s] max s s --> s.
[s1,s2] succ (max s1 s2) --> max (succ s1) (succ s2).
[s1,s2,s3] max (max s1 s2) s3 --> max s1 (max s2 s3).
[s1,s2,s3] rule s1 (max s2 s3) --> max (rule s1 s2) (rule s1 s3).
[s1,s2,s3] rule (max s1 s2) s3 --> max (rule s1 s3) (rule s2 s3).

(; Types and terms ;)

Univ : Sort -> Type.
def Term : s : Sort -> a : Univ s -> Type.

univ : s : Sort -> Univ (succ s).
def prod : s1 : Sort -> s2 : Sort -> a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ (rule s1 s2).
def join : s1 : Sort -> s2 : Sort -> Univ s1 -> Univ s2 -> Univ (max s1 s2).
def cast : s1 : Sort -> s2 : Sort -> a : Univ s1 -> b : Univ s2 -> Term s1 a -> Term (max s1 s2) (join s1 s2 a b).

[s] Term _ (univ s) --> Univ s.

[s, a] Term _ (cast _ _ (univ s) _ a) --> Term s a.

[s1 : Sort, s2 : Sort, a : Univ s1, b : (Term s1 a -> Univ s2)]
  Term _ (prod s1 s2 a b) --> x : Term s1 a -> Term s2 (b x).

(; Canonicity rules ;)

[i] join _ _ i i --> i.

[s1,s2] join _ _ (univ s1) (univ s2) --> univ (max s1 s2).

[s1,s2,s3,a,b,c]
    join _ _ (prod s1 s2 a b) (prod s1 s3 a c)
--> prod s1 (max s2 s3) a (x : Term s1 a => join s2 s3 (b x) (c x)).

[s1,s2,s3,a,b,c,m,x]
    cast _ _ (prod s1 s2 a b) (prod s1 s3 a c) m x
--> cast s2 s3 (b x) (c x) (m x).

(; canonicity rules ;)

[t,a] cast _ _ t t a --> a.

[s1,s2,s3,a]
    cast _ _ (univ _) (univ s3) (cast _ _ (univ s1) (univ s2) a)
--> cast (succ s1) (succ (max s2 s3)) (univ s1) (univ (max s2 s3)) a.


[s1,s2,s3,a,b]
    prod _ s2 (cast _ _ (univ s1) (univ s3) a) (x => b x)
--> cast
      (succ (rule s1 s2))
      (succ (rule s3 s2))
      (univ (rule s1 s2))
	  (univ (rule s3 s2))
      (prod s1 s2 a (x => b x)).


[s1,s2,s3,a,b]
    prod s1 _ a (x => cast _ _ (univ s2) (univ s3) (b x))
--> cast
      (succ (rule s1 s2))
      (succ (rule s1 s3))
      (univ (rule s1 s2))
	  (univ (rule s1 s3))
      (prod s1 s2 a (x => b x)).
