unif ff (app (lam _ F) M) M.

unif ff (app plus zero) (rec A B C D).
unif ff (app (lam _ (app succ)) M) (app succ N).
unif ff (app (app (lam _ (x\ lam _ (y\ y))) M) N) zero.
unif ff (app (app (lam _ (x\ lam _ (y\ y))) M) zero) (app (lam _ (x\x)) zero).
unif ff (app (app (lam _ (x\ lam _ (y\ y))) M) zero) (app (lam _ (x\x)) (app (lam _ (x\x)) zero)).
unif ff (app (app plus (app succ zero)) (app succ zero)) (app succ (app succ zero)).
unif ff (app (app (lam _ (x\ succ)) zero) zero) (app succ zero).
unif ff (app succ (app (lam _ (x\ x)) zero)) (app succ zero).
unif ff (lam nat (x\ (app succ (app (lam _ (x\ x)) zero)))) (lam Y (y\ (app succ zero))).
unif ff (app (app plus (app succ M)) zero) (app (app plus (app succ (app succ N))) zero).

of (app succ hole) T M S true.
of (app succ hole) T M S (of M R A L true).
of (lam nat (x\ x)) T M S true.

of (lam (prod nat (a\ nat)) (f \ (app (lam nat (x\ app f x)) hole))) T M S true.
of (lam (prod nat (a\ prod nat (b\ nat))) (f \ (app (lam nat (x\ app (app f x) x)) hole))) T M S true.

of (prod nat (x\ nat)) T M S true.
of (prod nat (x\ prod nat (y\ nat))) T M S true.

of (app (app vcons zero) vnil) T M S true.
of (lam nat (n \ lam (app vect n) (v \ (app (app vcons n) v)))) T M S true.
