not (unify N M).
not (unify N N).
test_unify hole hole T M N S.
test_unify vcons hole T M N Sig.

test_unify (app hole zero) hole T M N S.
test_unify (app hole zero) zero T M N S.

test_unify (app (lam nat (x\ app hole x)) zero) zero T M N S.
test_unify (app (lam nat (x\ app hole x)) zero) (app succ zero) T M N S.
 
# test_unify (app plus zero) (rec hole hole hole (x\y\ app (app hole x) y)) T M N Sig.
# test_unify (app (lam hole (app succ)) hole) (app succ hole) T M N Sig.

# test_unify (app (app vcons zero) vnil) hole M N Sig.
test_unify (lam nat (n \ lam (app vect n) (v \ (app (app vcons n) v)))) hole M N Sig.

unify (app (app (lam _ (x\ lam _ (y\ y))) M) N) zero.
unify (app (app (lam _ (x\ lam _ (y\ y))) M) zero) (app (lam _ (x\x)) zero).
unify (app (app (lam _ (x\ lam _ (y\ y))) M) zero) (app (lam _ (x\x)) (app (lam _ (x\x)) zero)).
unify (app (app plus (app succ zero)) (app succ zero)) (app succ (app succ zero)).
unify (app (app (lam _ (x\ succ)) zero) zero) (app succ zero).
unify (app succ (app (lam _ (x\ x)) zero)) (app succ zero).
unify (lam nat (x\ (app succ (app (lam _ (x\ x)) zero)))) (lam Y (y\ (app succ zero))).
unify (app (app plus (app succ M)) zero) (app (app plus (app succ (app succ N))) zero).

of (app succ hole) T M S true.
of (app succ hole) T M S (of M R A L true).
of (lam nat (x\ x)) T M S true.

of (lam (prod nat (a\ nat)) (f \ (app (lam nat (x\ app f x)) hole))) T M S true.
of (lam (prod nat (a\ prod nat (b\ nat))) (f \ (app (lam nat (x\ app (app f x) x)) hole))) T M S true.

of (prod nat (x\ nat)) T M S true.
of (prod nat (x\ prod nat (y\ nat))) T M S true.

of (app (app vcons zero) vnil) T M S true.
of (lam nat (n \ lam (app vect n) (v \ (app (app vcons n) v)))) T M S true.
