% validation of case construction.
% kernel_inductives invokes conv+case+type and conv_case_branch

% HELPERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% left basic reductions.
convl+main T1 P1 M T2 P2 :- whd+basic T1 P1 on+whd T P, !, convl+main T P M T2 P2.

% left sigma for abbreviation + theta.
convl+main (abbr _ V1 F1) P1 M T2 P2 :- !, pi x\ l+subst x V1 _ =>
%                                       if on+focus ($print theta),
                                        convl+main (F1 x) P1 M T2 P2.

% right basic reductions.
convl+main T1 P1 M T2 P2 :- whd+basic T2 P2 on+whd T P, !, convl+main T1 P1 M T P.

% right sigma for abbreviation + theta.
convl+main T1 P1 M (abbr _ V2 F2) P2 :- !, pi x\ l+subst x V2 _X =>
%                                       if on+focus ($print theta),
                                        convl+main T1 P1 M (F2 x) P2.

% OUTPUT TYPE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% removing left product (on+case+type).
convl+main (prod W1 F1) [] (on+case+type W K S [V|SN] DX) U2 S2 :- !,
  pi x\ l+subst x V X => convl+main (F1 x) [] (on+case+type W K S SN DX) U2 S2.

% xi for right product (on+case+type).
convl+main (prod W1 F1) [] (on+case+type W K S [] [_|DX]) (prod W2 F2) [] :- !,
  conv+eq W1 W2,
  pi x\ convl+main (F1 x) [] (on+case+type W K S [] DX) (F2 x) [].

% final checks (on+case+type).
convl+main (sort YI) [] (on+case+type W1 K SN1 [] []) (prod W2 F2) [] :-
  whd+long W2 []
    (W\ S\ sigma SN\ sigma DX\
      W = W1, split S K SN DX, forall2 SN1 SN conv+eq
    ),
  pi x\ convl+main (sort YI) [] on+case+proj (F2 x) [].

% projectability (on+case+proj)
% note: we do nothing for now ...
convl+main (sort YI) [] on+case+proj (sort YO) [] :- true.

conv+case+type T1 W K SN DX T2 :- convl+main T1 [] (on+case+type W K SN SN DX) T2 [].

% BRANCHES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% removing left arruct (on+case+branch).
convl+main (prod W1 F1) [] (on+case+branch V0 K U0 [V|SN]) U2 S2 :- !,
  pi x\ l+subst x V X => convl+main (F1 x) [] (on+case+branch V0 K U0 SN) U2 S2.

% xi for right arruct (on+case+branch).
convl+main (prod W1 F1) [] (on+case+branch V0 K U0 []) (prod W2 F2) [] :- !,
  conv+eq W1 W2,
  pi x\ convl+main (F1 x) [] (on+case+branch (appl V0 x) K U0 []) (F2 x) [].

% final checks (on+case+branch).
convl+main _ S1 (on+case+branch V K U []) U2 S2 :-
  split S1 K _ DX, append DX [V] DXV, conv+main U DXV on+eq U2 S2.

conv+case+branch T1 V0 K SN U0 T2 :-
  convl+main T1 [] (on+case+branch V0 K U0 SN) T2 [].
