Specification "cic".

/********** is_olist ************/

Define is_olist: olist -> prop by
   is_olist nil ;
   is_olist (HD::TL) := is_olist TL.

Theorem inst_is_olist: forall G N, nabla (x:tm),
 is_olist (G N) -> is_olist (G x).
induction on 1. intros. case H1. case H2. search. case H2.
apply IH to H3 with x = n1, G = G2, N = N. search.

/*********** split ***************/

Define split : olist -> olist -> o -> prop by
  split (A :: G) G A ;
  split (A :: G) (A :: D) B := split G D B.

Theorem inst_split : forall L1 L2 E, nabla (x:tm),
  split L1 (L2 x) (E x) -> (nabla z, L2 x = L2 z).
induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem monotone_split: forall G1 G2 X,
 split G1 G2 X -> forall Y, member Y G1 -> member Y (X :: G2).
induction on 1. intros. case H1. search. case H2. search. apply IH to H3.
apply H5 to H4. case H6. search. search.

Theorem split_is_olist: forall G0 G1 E,
 split G0 G1 E -> is_olist G1 -> is_olist G0.
induction on 1. intros. case H1. search. apply IH to H3 _. case H2. search.
search.

/*********** appendctx ***************/

Define appendctx: olist -> olist -> olist -> prop by
  appendctx nil L L ;
  appendctx (HD::TL) L1 (HD::L2) := appendctx TL L1 L2.

Theorem append_functional: forall G1 G2, is_olist G1 -> exists G3,
 appendctx G1 G2 G3.
 induction on 1. intros. case H1.
  search.
  apply IH to H2 with G2 = G2. search.

Theorem member_appendctx1: forall G1 G2 G3 X,
 appendctx G1 G2 G3 -> member X G1 -> member X G3.
induction on 1. intros. case H1. case H2. case H2. unfold. search.
apply IH to H3 H4. search.

Theorem member_appendctx2: forall G1 G2 G3 X,
 appendctx G1 G2 G3 -> member X G2 -> member X G3.
induction on 1. intros. case H1. search. unfold. apply IH to H3 H2. search.

Theorem inst_appendctx :
 forall G1 G2 G3 N, nabla (x:tm),
  appendctx (G1 x) G2 (G3 x) -> appendctx (G1 N) G2 (G3 N).
induction on 1. intros. case H1.
 search.
 apply IH to H2 with N = N. search.
