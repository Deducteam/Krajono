Specification "metacic".
Import "cic".

/**** The two invariants ****/

Define compat: olist -> olist -> olist -> prop by
  compat nil nil G2 ;
  nabla x, compat (of x Ty x :: copy x x :: G0 x) (G1 x) (G2 x) :=
   nabla x, { G2 x |- of x Ty x } /\ compat (G0 x) (G1 x) (G2 x) ;
  nabla x, compat (of x Ty x :: copy x x :: G0 x) (G1c x) G2 :=
   exists N G1, nabla x, split (G1c x) G1 (copy x N) /\
    { G2 |- of N Ty N } /\ compat (G0 N) G1 G2 /\ irl2 G1 N.

Theorem compat_is_olist: forall G0 G1 G2,
 compat G0 G1 G2 -> is_olist G0.
induction on 1. intros. case H1.
 search.
 apply IH to H3. search.
 apply IH to H4. backchain split_is_olist. backchain inst_is_olist.

Define closed: olist -> tm -> prop by
  closed nil M ;
  nabla x, closed (of x Ty x :: L x) (M x) := nabla x, closed (L x) (M x) ;
  nabla x, closed (copy x x :: L x) (M x) := nabla x, closed (L x) (M x) ;
  nabla x, closed (copy x N :: L) M := closed L M.

Theorem closed_split: forall G1 G5 X N, nabla x,
 closed (G1 x) (X x) -> split (G1 x) G5 (copy x N) ->
  (nabla y, X x = X y) /\ closed G5 (X x).
induction on 1. intros. case H1.
 case H2.
 case H2. apply IH to H3 H4. search.
 case H2.
 case H2. apply IH to H3 H4. search.
 case H2.
 case H2. apply IH to H3 H4. apply inst_split to H4. search.
 case H2. search.

/**** The theorem ****/

/* Falso: (copy n2 T) \in G |/- n2 = T.
Theorem test: forall G M N T, nabla x,
 { G, copy x M |- copy (N x) T } -> N M = T.
induction on 1. intros. case H1.
 search.
 skip.
 skip.
 skip.
 case H3. case H2. search.
xxx. */

/* Falso: (copy n1 T) \in G |/- copy T T
Theorem test: forall G M N T, nabla x,
 { G, copy x M |- copy (N x) T } -> { G |- copy (N M) T }.
induction on 1. intros. case H1 (keep).
 search.
 skip.
 skip.
 skip.
xxx.
 case H3.
  case H2.
xxx. */

Theorem main_lemma : forall M Ty Ty2 G0 G1 G2 G02 X,
 compat G0 G1 G2 ->
 appendctx G0 G2 G02 ->
 typing_context G02 ->
 typing_context G2 ->
 { G02 |- of M Ty M } ->
 { G1 |- copy M X } -> closed G1 X ->
 { G1 |- copy Ty Ty2 } -> closed G1 Ty2 ->
 { G2 |- of X Ty2 X }.
induction on 1.
intros Compat Append TypingCtx TypingCtx1 Canon CopyB CopyBClosed CopyTy CopyTyClosed.
Compat: case Compat.
/*nil*/
Append: case Append.
apply copy_M_M_to_eq to CopyB. apply copy_M_M_to_eq to CopyTy. search.
/*irl*/
Append: case Append. Append: case Append.
apply IH to Compat1 Append _ _ _ _ CopyBClosed _ CopyTyClosed.
monotone Compat with L3 n1. intros. backchain member_appendctx2.
Canon: cut Canon with H1.
apply simple_variable_typing_inversion to _ H1. case TypingCtx. case H2.
apply member_typing_context2 to _ H3. case TypingCtx.
monotone Canon1 with L3 n1. intros. case H5. search. search. search.
case TypingCtx.
search.
/*of*/
Append: case Append. Append: case Append.
Append: apply inst_appendctx to Append with N = N.
Canon: inst Canon with n1 = N. monotone Compat1 with (L2 N). intros.
 apply member_appendctx2 to Append1 H1. search. Canon: cut Canon1 with H1.
CopyBClosed: apply closed_split to CopyBClosed Compat.
CopyTyClosed: apply closed_split to CopyTyClosed Compat.
monotone CopyB with (copy n1 N :: G5). backchain monotone_split.
monotone CopyTy with (copy n1 N :: G5). backchain monotone_split.
apply copy_M_M to Compat3.
CopyB: inst H2 with n1 = N. CopyB: cut CopyB1 with H4.
CopyTy: inst H3 with n1 = N. CopyTy: cut CopyTy1 with H4.
apply IH to Compat2 Append1 _ _ _ CopyB2 _ CopyTy2 _.
assert { G4 |- copy N N }. Compat: apply well_typed_to_irl2 to _ Compat1.
apply copy_M_M to Compat4. search.
monotone H5 with L3 N. intros. backchain member_appendctx2.
cut Canon2 with H6. search. case TypingCtx. search.

Theorem main_thm : forall M Ty Ty2 G0 G1 G2 X,
 typing_context G0 -> typing_context G2 ->
 { G0 |- of M Ty M } ->
 { G1 |- copy M X } -> closed G1 X ->
 compat G0 G1 G2 ->
 { G1 |- copy Ty Ty2 } -> closed G1 Ty2 ->
 { G2 |- of X Ty2 X }.
intros TypingCtx0 TypingCtx2.
apply append_functional to _ with G1 = G0, G2 = G2.
apply compat_is_olist to H4. search.
monotone H1 with G3. intros. apply member_appendctx1 to H7 H8. search.
apply append_typing_context to _ _ H7.
backchain main_lemma.

/**** The reflective version ****/
/*
Define reflect: olist -> olist -> olist -> tm -> listtm -> seq -> prop by
  reflect nil nil G2 Concl xnil (vdash Concl);
  nabla x, reflect (of x Ty x :: copy x x :: G0 x) (G1 x) (G2 x)
   Concl (xcons x (Subst x)) (decl Ty Seq) :=
   nabla x, reflect (G0 x) (G1 x) (G2 x) Concl (Subst x) (Seq x) ;
  nabla x, reflect (of x Ty x :: copy x x :: G0 x) (G1c x) G2
   Concl (xcons N Subst) (decl Ty Seq) :=
   exists N G1, nabla x, split (G1c x) G1 (copy x N) /\
    reflect (G0 x) G1 G2 Concl Subst (Seq x) /\ irl2 G1 N.

Theorem reflect_compat: forall G0 G1 G2 Concl Subst SubstConcl Seq,
 typing_context G2 ->
 reflect G0 G1 G2 Concl Subst Seq ->
 { G2 |- of-seq Seq Subst SubstConcl } ->
 compat G0 G1 G2 /\ { G1 |- copy Concl SubstConcl }.
induction on 2. intros. case H2.
 case H3. skip./*Falso*/ skip./*Vero*/
 case H3.
  apply IH to _ H4 _. search.
  apply member_typing_context to H1 H6. case H7. case H8. case H5. case H5.
   case H5.
 case H3.
  apply IH to _ H5 _ with SubstConcl = SubstConcl n1.
   skip./*False*/
xxx.
  skip./*Vero*/*/
