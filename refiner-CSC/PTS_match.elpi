% validation of match construction.
% PTS_inductives invokes conv_match_type and conv_match_branch

% HELPERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type comp*_sn term -> @stack -> conversion_mode -> @whd_continuation.
type conv*_sn term -> @stack -> conversion_mode -> term -> @stack -> prop.
%
comp*_sn T2 S2 M _ T S :- comp* T S M T2 S2.
conv*_sn T1 S1 M T2 S2 :- whd* T1 S1 (comp*_sn T2 S2 M).

type comp*_dx term -> @stack -> conversion_mode -> @whd_continuation.
type conv*_dx term -> @stack -> conversion_mode -> term -> @stack -> prop.
%
comp*_dx T1 S1 M _ T S :- comp* T1 S1 M T S.
conv*_dx T1 S1 M T2 S2 :- whd* T2 S2 (comp*_dx T1 S1 M).

type conv*_dx_sn term -> @stack -> conversion_mode -> @whd_continuation.
type conv* term -> @stack -> conversion_mode -> term -> @stack -> prop.
%
conv*_dx_sn T2 S2 M _ T S :- conv*_dx T S M T2 S2.
conv* T1 S1 M T2 S2 :- whd* T1 S1 (conv*_dx_sn T2 S2 M).

type comp* term -> @stack -> conversion_mode -> term -> @stack -> prop.

% OUTPUT TYPE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type on_match_type term -> int -> @stack -> @stack -> @stack -> conversion_mode.

type on_match_proj conversion_mode.

% removing left product (on_match_type).
comp* (arr W1 F1) [] (on_match_type W K S [V|SN] DX) U2 S2 :- !,
  pi x\ val x W1 V NF => conv*_sn (F1 x) [] (on_match_type W K S SN DX) U2 S2.

% xi for right product (on_match_type).
comp* (arr W1 F1) [] (on_match_type W K S [] [_|DX]) (arr W2 F2) [] :- !,
  conv W1 W2,
  pi x\ (of3 x W1 x :- !) => conv* (F1 x) [] (on_match_type W K S [] DX) (F2 x) [].

% final checks (on_match_type).
comp*_inner W1 K SN1 _ W S :- 
  W = W1, split S K SN DX, forall2 SN1 SN conv.
comp* (sort YI) [] (on_match_type W1 K SN1 [] []) (arr W2 F2) [] :-
  whd* W2 [] (comp*_inner W1 K SN1),
  pi x\ (of3 x W2 x :- !) => conv*_dx (sort YI) [] on_match_proj (F2 x) [].

% projectability (on_match_proj)
% note: we do nothing for now ...
comp* (sort YI) [] on_match_proj (sort YO) [] :- true.

type conv_match_type term -> term -> int -> @stack -> @stack -> term -> prop.
conv_match_type T1 W K SN DX T2 :- conv* T1 [] (on_match_type W K SN SN DX) T2 [].

% BRANCHES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type on_match_branch term -> int -> term -> @stack -> conversion_mode.

% removing left arruct (on_match_branch).
comp* (arr W1 F1) [] (on_match_branch V0 K U0 [V|SN]) U2 S2 :- !,
  pi x\ val x W1 V NF => conv*_sn (F1 x) [] (on_match_branch V0 K U0 SN) U2 S2.

% xi for right arruct (on_match_branch).
comp* (arr W1 F1) [] (on_match_branch V0 K U0 []) (arr W2 F2) [] :- !,
  conv W1 W2,
  pi x\ (of3 x W1 x :- !) => conv* (F1 x) [] (on_match_branch (app V0 x) K U0 []) (F2 x) [].

% final checks (on_match_branch).
comp* _ S1 (on_match_branch V K U []) U2 S2 :-
  split S1 K _ DX, append DX [V] DXV, comp U DXV eq U2 S2.

type conv_match_branch term -> term -> int -> @stack -> term -> term -> prop.
conv_match_branch T1 V0 K SN U0 T2 :-
  conv* T1 [] (on_match_branch V0 K U0 SN) T2 [].
