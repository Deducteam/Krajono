%% To be accumulated *before* PTS_typing to turn the kernel into a refiner

type hole term.
type vect term.

% match_sort %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (match_sort i o).
match_sort (?? as S) U :- !, $constraint (match_sort S U) [S].

% of3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (of3 i o o).
of3 (?? as T) U RT :- !, $constraint (of3bidir T U RT) [T].

mode (of3bidir i i o).

% CSC: XXX why not (is_rigid_term TY) does not work?
of3bidir T (?? as TY) T' :-
 !, of3 T TY T'.

of3bidir (?? as T) XU RT :- !, $constraint (of3bidir T XU RT) [T].

of3 hole U RT :- !, of3 T U RT.

%of3bidir (app M vect) TM RM :- of3bidir M TM RM.
of3 (app M vect) TM RM :- of3 M TM RM.

% could be optimized
%of3bidir (app M vect) U RT :- !,
%  $print "OF3BIDIR SPECIAL" (of3bidir (app M vect) U RT),
%  of3bidir (app (app M hole) vect) U RT.

% could be optimized
of3 (app M vect) U RT :- !,
%  $print "TRYING EXPANDING VECT" (app M vect),
  of3 M TM RM, ifnotelse (is_flex TM)%(is_rigid_term TM [])
   (match_arr TM _ _,
%    $print "EXPANDING VECT" (app (app RM hole) vect),
    of3 (app (app RM hole) vect) U RT)
   fail.

constraint of3bidir of3 val comp mcomp match_sort {
%   rule (G1 ?- of3 (?? as X1) T1 _) \ (G2 ?- of3 (?? as X2) T2 _) > X1 = X2
%     | ($match_frozen X1 _ L1, $match_frozen X2 _ L2, is_canonical L1, compat G1 L1 T1 G2 L2 T2 L3) <=> L3.
}

is_canonical [].
is_canonical [X|XS] :- $is_name X, not (mem XS X), is_canonical XS.

% (C ?- TC) is the canonical one
compat C [] TC L [] TL H :- append C L CTX, H = (CTX => conv TL TC).

compat C [V|VS] TC L [Arg|Args] TL K :-
 H1 = (L => of3 Arg U1 R1),
 H2 = (C => of3 V U2 R2),
 append C L CTX, H3 = (CTX => conv U1 U2),
 compat [val V U2 R1 _NF|C] VS TC L Args TL K2,
 K = (H1, H2, H3, K2).

% succ %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (succ i o).

% max %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (max i i o).

% vim: set ft=lprolog:
