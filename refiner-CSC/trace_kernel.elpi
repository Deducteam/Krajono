% Trace facilities for PTS_kernel_machine
% accumulate before the environment and before PTS_kernel_machine.elpi
% uncomment the traces to catch

% Note: longest object to validate in nat.ma for now
% focus :- on_object cic:/matita/arithmetics/nat/plus_minus#def:5.
% Note: very slow
% focus :- on_object cic:/matita/arithmetics/nat/nat_discr#def:2.
% Note: refinement queries work up to here:
focus :- after_object cic:/matita/basics/relations/reflexive#def:2.

% UTILITIES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

trace P :- if focus ($print "----<<---- enter: " {$counter "run"} P), P, if focus ($print "---->>---- exit: " P), !.
trace P :- if focus ($print "---->>---- fail: " P), fail.

vals :- val X T N NF, focus, $print "VAL" X "##" T "##" N "##" NF, fail.

ldecs :- ldec X W, focus, $print "* ldec" X ":" W, fail.

ldefs :- ldef X W V, focus, $print "* ldef" X "=" V ":" W, fail.

ofs [] :- fail.
ofs [T | L] :- if (focus, of3 T U _) ($print "OF3" T "##" U), ofs L.

at_end :- $print "context", (ldecs; ldefs).

% TRACES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% For PTS_machine.elpi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% whd* T S _ :- focus, $print (whd* T S), fail.

% match_sort T S :- focus, $print "match_sort" T "->" S, fail.

% match_arr TM A1 Bx :- focus, $print (match_arr TM "##" A1 "##" Bx), fail.

% comp T1 S1 M T2 S2 :- focus, $print "?? comp" T1 "##" S1 "<=" M "=>" T2 "##" S2, fail.

% sub U1 U2 :- focus, $print (sub U1 "<=>" U2), fail.

%%% For PTS_typing.elpi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% of3 T U RT :- focus, $print "of3" T "~" RT ":" U, $names X, $print X, fail. % ofs X.

% succ S1 S2 :- focus, $print (succ S1 S2), fail.

% max S1 S2 S3 :- focus, $print (max S1 S2 S3), fail.

%%% For PTS_match.elpi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% comp* T1 S1 M T2 S2 :- focus, $print (comp* T1 "##" S1 "<=" M "=>" T2 "##" S2), fail.

%%% For PTS_inductives.elpi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% whd_continue_unwind W _ _ :- focus, $print (whd_continue_unwind W), fail.

% mk_out_type W0 U0 V W P _ _ :- focus, $print (mk_out_type W0 U0 V W P), fail.

%%% For PTS_cic.elpi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% univ+pair U1 U2 :- focus, $print "?? univ pair" U1 ">" U2, fail.

% pts+pair S1 S2 :- focus, $print "?? pts pair" S1 ">" S2, fail.

% pts+triple S1 S2 S3 :- focus, $print "?? pts triple" S1 "\\/" S2 ">" S3, fail.

%%% For PTS_machine_refiner.elpi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% mcomp T1 S1 M T2 S2 :- focus, $print "?? meta comp" T1 "##" S1 "<=" M "=>" T2 "##" S2, fail.

%%% For PTS_cic_floating.elpi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% llt U1 U2 :- focus, $print (llt U1 U2), fail.

%%% For PTS_matita.elpi %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% has_type T U :- focus, $print (has_type T U), fail.

approx T V W :- $print "?? approx" T "as" V ":" W, at_end.

approx_cast T U V :- $print "?? approx cast" T ":" U "as" V, at_end.
