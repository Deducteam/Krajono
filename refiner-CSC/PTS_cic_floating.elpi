% accumulate after floating.elpi

% llt issued by floating %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% fixed universes..
llt U1 U2 :- univ+chain U1 U2.

% lle issued by floating %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% fixed universes..
lle U U :- !.
lle U1 U2 :- univ+chain U1 U2.

% leq issued by PTS_machine_refiner %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (leq i i).

% meta, meta: ??
% leq (?? as A) A :- !. % fast path for reflexivity
leq (?? as A) (?? as B) :- !, $constraint (leq A B) [A, B].

% meta can be prop, cprop, or type: ??
leq (?? as A) (s+type U) :- !, $constraint (leq A (s+type U)) [A].

% meta can be prop or cprop: ??
leq (?? as A) (s+cprop U) :- !, $constraint (leq A (s+cprop U)) [A].

% meta can be cprop or type: ??
leq (s+cprop U) (?? as A) :- !, $constraint (leq (s+cprop U) A) [A].

% this also resolves: leq (?? as A) prop
leq s+prop _.

% when metas get e value, we check universe levels
leq (s+type U1) (s+type U2) :- lle U1 U2.
leq (s+cprop U1) (s+type U2) :- lle U1 U2.
leq (s+cprop U1) (s+cprop U2) :- lle U1 U2.

% lt issued by PTS_machine %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (lt i o).

% meta: ??
lt (?? as S1) S2 :- $constraint (lt S1 S2) [S1].

% when the meta gets e value, we check universe levels
% the cuts rule out the clauses of PTS_cic
lt (s+type U1) (s+type U2) :- llt U1 U2, !.
lt (s+cprop U1) (s+type U2) :- llt U1 U2.
lt (s+cprop U1) (s+cprop U2) :- llt U1 U2, !.
