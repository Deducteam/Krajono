% PTS extension with inductive types and recursive functions
% accumulate after PTS_machine.elpi, and before PTS_global.elpi

macro @whd_unwind_continuation :- term -> @stack -> term -> @stack -> prop.

% match W U V A: match V with constructors of ind. type W, and select branch in A of type U
type match term -> term -> term -> list term -> term.

% match_trame W U A P: stack frame for match
type match_trame term -> term -> list term -> @stack -> @stack.

% HELPERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% we need to compare match frames on stacks
forall2 (match_trame W U1 A1 P1) (match_trame W U2 A2 P2) F :-
 F U1 U2, forall2 A1 A2 F, forall2 P1 P2 F.

type whd_continue_unwind_inner @whd_unwind_continuation -> term -> @whd_continuation.
type whd_continue_unwind term -> @whd_unwind_continuation -> term -> prop.
% Whd followed by continuation and machine unwinding.
whd_continue_unwind_inner K NF L T1 S1 :-
 K T1 S1 T2 S2, unwind_stack S2 T2 TS, put_abbr L TS NF.
whd_continue_unwind N K NF :-
 whd* N [] (whd_continue_unwind_inner K NF).

% REDUCTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

type get_branch int -> @stack -> term -> @stack -> @stack -> prop.
/* stack, constructor => branch, rear stack, front stack */ 
get_branch (match_trame _ _ A P) J T P [] :- nth A J T.
get_branch [V|P] J T P1 [V|P2] :- get_branch P J T P1 P2.

% wind for match
whd1 (match W U V A) P C :- C [] V (match_trame W U A P).

% iota for match
% note: the left arguments must be removed
whd1 T1 P1 C :- get_constructor T1 J K, !,
                get_branch P1 J T2 P A, split A K SN DX, append DX P P2,
                C [] T2 P2.

% unwind for match
unwind_stack (match_trame W U A P) V1 V2 :- unwind_stack P (match W U V1 A) V2.

% GLOBAL DELTA EXPANSION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

is_constructor V P V P :- get_constructor V _ _.

unwind_whd_to_constructor V1 V2 :- whd_continue_unwind V1 is_constructor V2.

% check constructor before expanding fixpoint
expand T1 P1 P2 :- get_fixpoint T1 L, !,
                   subst P1 L unwind_whd_to_constructor P2.

% TYPING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

check_branch U K SN V0 T0 RT0 :-
 of3 V0 W0 RV0, of3 T0 U0 RT0,
 fold_left SN app RV0 SNV0,
 conv_match_branch W0 SNV0 K SN U U0.

mk_out_type W U V TS RW RU RA W S RU DXV :-
 get_inductive W K VS, split S K SN DX,
 of3 W T1 RW, of3 U T2 RU,
 conv_match_type T1 RW K SN DX T2,
 forall3 VS TS RA (check_branch RU K SN),
 append DX [V] DXV.

% not complete, we do not check allowed sort elimination
% W = inductive type matched on
% U = out-type (used to compute the type of the branches)
% V = scrutinee
% A = branches
of3 (match W U V A) X (match RW RU RV RA) :-
 of3 V W1 RV, whd_continue_unwind W1 (mk_out_type W U RV A RW RU RA) X.
