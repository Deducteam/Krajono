%% To be accumulated *before* kernel_pts to turn the kernel into a refiner
% vim: set ft=lprolog:

mode (whd1 i i i).
whd1 ?? _ _ :- fail.

mode (whd** i i o i).
whd** (?? as X) S L K :- !, K L X S.

mode (occur_check i i).
occur_check (?? _ L1 as V1) (?? as V2) :-
 !, not ($is_same_flex V1 V2),
 forall L1 (x \ occur_check x V2).
occur_check (sort _) _ :- !.
occur_check (app A B) X :- !, occur_check A X, occur_check B X.
occur_check (lam TY F) X :- !,
 occur_check TY X, pi x \ occur_check (F x) X.
occur_check (arr TY F) X :- !,
 occur_check TY X, pi x \ occur_check (F x) X.
occur_check V X :- val V _ T _, !, occur_check T X.
occur_check T V :- !. % for non-let-bound variables
mode (comp i i i i i).

% These two redundant rules are here to turn an (app X t) into an X
% such that X is later detected as flexible in the rule for projection
% (to limit projections)
comp (app T1 T2) S1 M V2 S2 :- !, comp T1 [T2|S1] M V2 S2. 
comp V2 S2 M (app T1 T2) S1 :- !, comp V2 S2 M T1 [T2|S1]. 

comp (?? as V1) S1 M (?? as V2) S2 :- !,
 $print "FLEX-FLEX COMP: " (comp V1 S1 M V2 S2),
 $constraint (
   comp V1 S1 M V2 S2
 ) [V1,V2]
 .

% T1 :- lam TYA F  + beta step
comp (?? as T1) [A|AS] M T2 L2 :-
 of3 A TA RA,
 T1 = lam TA' F,
 conv TA TA',
 pi x \ val x TA RA _NF => ($print "VAL" (val x TA RA _NF), comp (F x) AS M T2 L2).

on_rigid_term B S CONT :-
 whd* B S (_ \ B' \ S' \
  not (is_flex B'),
  CONT B' S').

% PROJECTION
comp (?? as V1) [] M T2 S2 :-
 val X _ B _,
 on_rigid_term B [] (_ \ _ \
  V1 = X,
  on_rigid_term T2 S2 (T2' \ S2' \
    comp V1 [] M T2' S2'
  )),
 !.

% MIMIC
% non empty stack = application
comp (?? as V1) [] _ T2 S2 :-
 append S21 [S2l] S2,
 V1 = app X Y, comp X [] eq T2 S21, comp Y [] eq S2l [].

% regular mimic rules
comp (?? as V1) [] M T2 [] :-
 ifnot (occur_check T2 V1) ($print "OCCUR CHECK FAILED FOR" (comp V1 [] M T2 []), fail),
 mcompoii V1 M T2. % mcomp used generatively

% variables and constants
comp (?? as V1) [] M T2 [] :- V1 = T2.

% REDUCTION
comp (?? as V1) [] M T2 S2 :- whd1 T2 S2 (comp_dx V1 [] M).

% FAIL
comp ?? [] _ _ _ :- !, fail. % to avoid falling back in the fast path of the
                             % kernel

mode (mcomp o i i) xas mcompoii, (mcomp i i o) xas mcompiio.

% MIMIC
%mcompoii V1 M (?? as V2) :-
% $print "FLEX-FLEX CASEoii: " V1 V2,
% V1 = V2,  %is_llam in ELPI is bugged!
% $print "FLEX-FLEXoii CASE DONE: " V1 V2,
% $dprint "FLEX-FLEXoii CASE DONE: " V1 V2.

%mcompiio (?? as V1) M V2 :-
% $print "FLEX-FLEX CASEiio: " V1 V2,
% V1 = V2,  %is_llam in ELPI is bugged!
% $print "FLEX-FLEXiio CASE DONE: " V1 V2,
% $dprint "FLEX-FLEXiio CASE DONE: " V1 V2.

mcompoii V1 M (?? as V2) :- !,
 $print "FLEX-FLEX CASEoii: " V1 V2,
 $constraint ($print "--- FLEX-FLEX-CASEoii RESUMED ----" (comp V1 [] M V2 []), comp V1 [] M V2 [], $print "<<< FLEX-FLEX-CASEoii (RESUMED) COMPLETED" (comp V1 [] M V2 [])) [V1,V2],
 $print "FLEX-FLEXoii CASE DELAYED".

mcompiio (?? as V1) M V2 :- !,
 $print "FLEX-FLEX CASEiio: " V1 V2,
 $constraint ($print "--- FLEX-FLEX-CASEiio RESUMED ----" (comp V1 [] M V2 []), comp V1 [] M V2 [], $print "<<< FLEX-FLEX-CASEiio (RESUMED) COMPLETED" (comp V1 [] M V2 [])) [V1,V2],
 $print "FLEX-FLEXiio CASE DELAYED".

% MIMIC
mcomp (sort I) eq (sort I) :- !.
mcomp (sort J) leq (sort I) :- !, leq J I.
mcomp (app A1 B1) _ (app A2 B2) :- !, comp A1 [] eq A2 [], comp B1 [] eq B2 [].
mcomp (lam TY1 F1) _ (lam TY2 F2) :-
 !, comp TY1 [] eq TY2 [], (pi x \ comp (F1 x) [] eq (F2 x) []).
mcomp (arr TY1 F1) M (arr TY2 F2) :-
 !, comp TY1 [] eq TY2 [], (pi x \ comp (F1 x) [] M (F2 x) []).


%%%%%%%%% symmetric cases

% T1 :- lam TYA F  + beta step
comp T2 L2 M (?? as T1) [A|AS] :-
 of3 A TA RA, 
 T1 = lam TA' F,
 conv TA TA',
 pi x \ val x TA RA _NF => ($print "VAL2" (val x TA RA _NF), comp T2 L2 M (F x) AS).

% PROJECTION
comp T2 S2 M (?? as V1) [] :-
 val X _ B _,
 on_rigid_term B [] (_ \ _ \
  V1 = X,
  on_rigid_term T2 S2 (T2' \ S2' \
    comp T2' S2' M V1 []
  )),
 !.

% MIMIC
% non empty stack = application
comp T2 S2 _ (?? as V1) [] :-
 append S21 [S2l] S2,
 V1 = app X Y, comp T2 S21 eq X [], comp S2l [] eq Y [].
% regular mimic rules
comp T2 [] M (?? as V1) [] :-
 ifnot (occur_check T2 V1) ($print "OCCUR CHECK FAILED FOR" (comp T2 [] M V1 []), fail),
 mcompiio T2 M V1. % mcomp used generatively
% variables and constants
comp T2 [] M (?? as V1) [] :- V1 = T2.

% REDUCTION
comp T2 S2 M (?? as V1) [] :- whd1 T2 S2 (comp_sn V1 [] M).

% FAIL
comp _ _ _ ?? [] :- !, fail. % to avoid falling back in the fast path of the
                             % kernel
