accumulate logic.
accumulate list.

% Requires the accumulation of PTS_abbr_typing.

macro @stack :- list term.
macro @vars :- list term.
macro @whd_continuation :- @vars -> term -> @stack -> prop.

%%%%%%%%%%%%%%%% Reduction

whd1-call-k VL T S K _Kf :- K  VL T S.

type whd1 term -> @stack -> @whd_continuation -> prop -> prop.
% KAM-like rules in CPS style
whd1 (app M N) S K Kf :- !, whd1-call-k [] M [N|S] K Kf.
whd1 (lam T F1) [N|NS] K Kf :- !, pi x \ val x T N _NF => whd1-call-k [x] (F1 x) NS K Kf.
whd1 (abbr T N F1) NS K Kf :- !,
 % CSC: scommentando le righe dopo cambia il comportamento di ELPI
 % $print "WH1" (abbr T N F1) NS K,
 pi x \ val x T N _NF =>
 % CSC: scommentando le righe dopo cambia il comportamento di ELPI
 % $print "WH2" (K [x] (F1 x) NS),
 whd1-call-k [x] (F1 x) NS K Kf.
whd1 X S K Kf :- val X _ N NF, if (is_flex NF) (whd_unwind N NF), !,
 whd1-call-k [] NF S K Kf.

type whd*_inner @whd_continuation -> @vars -> @whd_continuation.
type whd*_outer @whd_continuation -> @whd_continuation.
type whd* term -> @stack -> @whd_continuation -> prop.
% Reflexive, transitive closure
whd*_inner K VL1 VL2 T2 S2 :- append VL1 VL2 VL, K VL T2 S2.
whd*_outer K VL1 T1 S1 :- whd* T1 S1 (whd*_inner K VL1).
%% whd* T1 S1 K :- whd1 T1 S1 (whd*_outer K), !.
%% whd* T1 S1 K :- K [] T1 S1.

type whd** term -> @stack -> @vars -> @whd_continuation -> prop.
%%%% KAM-like rules in CPS style
whd** (app M N) S L K :- !, whd** M [N|S] L K.
whd** (lam T F1) [N|NS] L K :- !, pi x \ val x T N _NF => whd** (F1 x) NS [x|L] K.
whd** (abbr T N F1) NS L K :- !, pi x \ val x T N _NF => whd** (F1 x) NS [x|L] K.
whd** X S L K :- val X _ N NF, if (is_flex NF) (whd_unwind N NF), !, whd** NF S L K.
% from PTS_inductives.elpi
whd** (match W U V A) P L C :- !, whd** V (match_frame W U A P) L C.
whd** T1 P1 L C :- get_constructor T1 J K,
                   get_branch P1 J T2 P A, split A K SN DX, append DX P P2,
                   !, whd** T2 P2 L C.
% from PTS_global.elpi
whd** T1 S1 L K :- env T1 _ T2, expand T1 S1 S2, !, whd** T2 S2 L K.
%
whd** T S L1 K :- rev_append L1 [] L2, K L2 T S.
%whd* T S K :- whd** T S [] K.

whd*-aux T S VL K :- whd1 T S (vl\ t1\ s1\ sigma VL2\ append VL vl VL2, (whd*-aux t1 s1 VL2 K)) ((env T _ B, expand T S S2, !, whd*-aux B S2 VL K) ; K VL T S).
whd* T S K :- (whd*-aux T S [] K).

type whd_unwind_inner term -> @whd_continuation.
type whd_unwind term -> term -> prop.
% Whd followed by machine unwinding.
whd_unwind_inner NF L T S :- unwind_stack S T TS, put_abbr L TS NF.
whd_unwind N NF :- whd* N [] (whd_unwind_inner NF).

type match_sort_inner @univ -> @whd_continuation.
type match_sort term -> @univ -> prop.
%
match_sort_inner I _ T S :- T = sort I, S = [].
match_sort T I :- whd* T [] (match_sort_inner I).

type match_arr_inner term -> (term -> term) -> @whd_continuation.
type match_arr term -> term -> (term -> term) -> prop.
%
match_arr_inner A F L T S :-
  S = [],
  T = arr A' F',
  put_abbr L A' A,
  pi x \ put_abbr L (F' x) (F x).
match_arr T A F :- whd* T [] (match_arr_inner A F).

type unwind_stack @vars -> term -> term -> prop.
% unwind_stack takes an head and a stack and decodes them to a term
unwind_stack [] T T.
unwind_stack [X|XS] T O :- unwind_stack XS (app T X) O.

% put_abbr takes a list of variables and a term and wraps the latter
% with local definitions for the variables in the list
put_abbr [] NF NF.
put_abbr [X|XS] I (abbr T N K) :- val X T N _, put_abbr XS I (K X).

%%%%%%%%%%%%%%%% Conversion

type lt @univ -> @univ -> prop.

type conv term -> term -> prop.
type sub term -> term -> prop.

type comp_sn term -> @stack -> eq_or_leq -> @whd_continuation.
type comp_dx term -> @stack -> eq_or_leq -> @whd_continuation.
type comp term -> @stack -> eq_or_leq -> term -> @stack -> prop.

type eq eq_or_leq.
type leq eq_or_leq.

is_atom X :- $is_name X, !.
is_atom X :- get_type X _.

conv T1 T2 :- comp T1 [] eq T2 [].
sub T1 T2 :- comp T1 [] leq T2 [].

% sorts equality
comp (sort I) [] eq (sort J) [] :- !, I = J.
comp (sort I) [] leq (sort J) [] :- I = J.
% cumulativity
comp (sort I) [] leq (sort J) [] :- !, lt I J.
% congruence
comp X S1 _ Y S2 :-
 is_atom X, is_atom Y, X = Y, forall2 S1 S2 (A \ B \ conv A B, !), !.
% congruence rules
comp (lam T1 F1) [] eq (lam T2 F2) [] :- !, conv T1 T2, pi x \ conv (F1 x) (F2 x).
% eta-expansion
comp (lam T1 F1) [] eq T S :- !,
 pi x \ (of3 x T1 x :- !) => (comp (F1 x) [] eq T {append S [x]}).
comp T S eq (lam T1 F1) [] :- !,
 pi x \ (of3 x T1 x :- !) => (comp T {append S [x]} eq (F1 x) []).
comp (arr T1 F1) [] D (arr T2 F2) [] :- !,
 conv T1 T2,
 pi x \ comp (F1 x) [] D (F2 x) [].
% reduction rules
%comp T1 S1 D T2 S2 :- whd1 T1 S1 (comp_sn T2 S2 D), !.
%comp T1 S1 D T2 S2 :- whd1 T2 S2 (comp_dx T1 S1 D), !.
comp T1 S1 D T2 S2 :-
  whd1 T1 S1 (_\ t1\ s1\ (comp t1 s1 D T2 S2, !) ;
                         whd1 T2 S2 (_\ t2\ s2\ comp t1 s1 D t2 s2) fail)
             (whd1 T2 S2 (_\ t2\ s2\ comp T1 S1 D t2 s2) fail).


% continuations
comp_sn T2 S2 D _ T1 S1 :-
 %ifnot (comp T1 S1 D T2 S2) (whd1 T2 S2 (comp_dx T1' S1' D)).
 comp T1 S1 D T2 S2.
comp_dx T1 S1 D _ T2 S2 :-
 comp T1 S1 D T2 S2.

% vim: set ft=lprolog:
