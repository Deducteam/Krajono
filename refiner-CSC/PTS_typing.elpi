% vim:set ft=lprolog:

kind term type.
type sort @univ -> term.
type app term -> term -> term.
type lam term -> (term -> term) -> term.
type arr term -> (term -> term) -> term.

type succ @univ -> @univ -> prop.
type max  @univ -> @univ -> @univ -> prop.

% approximant, refined inferred type, refined term
type of3 term -> term -> term -> prop.

of3 (sort I) (sort J) (sort I) :- !, succ I J.

of3 (app M N) (abbr A2 RN Bx) (app RM RN) :- !,
  trace "A1" (of3 M TM RM),
  trace "A2" (match_arr TM A1 Bx),
  trace "A3" (of3 N A2 RN),
  trace "A4" (sub A2 A1).

of3 (lam A F) (arr RA B) (lam RA RF):- !,
  trace "L1" (of3 A TA RA),
  trace "L2" (match_sort TA _),
  (pi x\ of3 x RA x => trace "L3" (of3 (F x) (B x) (RF x))),
  trace "L4" (of3 (arr RA B) _ _). % can't put this early, since B flexible

of3 (arr A B) (sort K) (arr RA RB) :- !,
  trace "P1" (of3 A TA RA),
  trace "P2" (match_sort TA I),
  (pi x\ of3 x RA x =>
    %CSC: scommentando la riga dopo cambia il comportamento di ELPI
    %$print "P2.5" (of3 (B x) (TB x) (RB x)),
    trace "P3" (of3 (B x) (TB x) (RB x)),
    trace "P4" (match_sort (TB x) J)
  ),
  trace "P5" (max I J K).
