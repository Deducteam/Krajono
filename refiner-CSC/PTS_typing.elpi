% vim:set ft=lprolog:

kind term type.
type sort @univ -> term.
type app term -> term -> term.
type lam term -> (term -> term) -> term.
type arr term -> (term -> term) -> term.

type succ @univ -> @univ -> prop.
type max  @univ -> @univ -> @univ -> prop.

% approximant, refined inferred type, refined term
type of3 term -> term -> term -> prop.

% aproximant, refined expected type, refined term
type of3bidir term -> term -> term -> prop.

of3bidir (lam A F) XU (lam RA RF):- !,
  match_arr XU XA XB,
  of3 A TA RA,
  conv RA XA,
  (pi x\ (of3 x RA x :- !) => of3bidir (F x) (XB x) (RF x)).

of3bidir T XU RT :-
 of3 T RU RT,
 sub RU XU.

of3 (sort I) (sort J) (sort I) :- !, succ I J.

of3 (app M N) (abbr A1 RN Bx) (app RM RN) :- !,
  of3 M TM RM,
  match_arr TM A1 Bx,
  of3bidir N A1 RN.

of3 (lam A F) (arr RA B) (lam RA RF):- !,
  of3 A TA RA,
  match_sort TA _,
  (pi x\ (of3 x RA x :- !) => of3 (F x) (B x) (RF x)),
  of3 (arr RA B) _ _. % can't put this early, since B flexible

of3 (arr A B) (sort K) (arr RA RB) :- !,
  of3 A TA RA,
  match_sort TA I,
  (pi x\ (of3 x RA x :- !) => (
    of3 (B x) (TB x) (RB x),
    match_sort (TB x) J
    )
  ),
  max I J K.
