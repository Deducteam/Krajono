% accumulate after floating.elpi

% llt issued by floating %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% fixed universes..
llt U1 U2 :- univ+chain U1 U2.

% lle issued by floating %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% fixed universes..
lle U U :- !.
lle U1 U2 :- univ+chain U1 U2.

% leq issued by PTS_machine_refiner %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (leq i i).

% meta, meta: ??
leq (?? as A) (?? as B) :- !, $constraint (leq A B) [A, B].

% meta can be prop, cprop, or type: ??
leq (?? as A) (s+type U) :- !, $constraint (leq A (s+type U)) [A].

% meta can be prop or cprop: ??
leq (?? as A) (s+cprop U) :- !, $constraint (leq A (s+cprop U)) [A].

% meta can be cprop or type: ??
leq (s+cprop U) (?? as A) :- !, $constraint (leq (s+cprop U) A) [A].

% this also resolves: leq (?? as A) prop
leq s+prop _.

% when metas get e value, we check universe levels
leq (s+type U1) (s+type U2) :- lle U1 U2.
leq (s+cprop U1) (s+type U2) :- lle U1 U2.
leq (s+cprop U1) (s+cprop U2) :- lle U1 U2.

% lt issued by PTS_machine %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (lt i o).

% meta: ??
lt (?? as S1) S2 :- $constraint (lt S1 S2) [S1].

% when the meta gets e value, we check universe levels
% the cuts rule out the clauses of PTS_cic
lt (s+type U1) (s+type U2) :- !, llt U1 U2.
lt (s+cprop U1) (s+type U2) :- llt U1 U2.
lt (s+cprop U1) (s+cprop U2) :- !, llt U1 U2.

% succ issued by PTS_typing %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (succ i o).

% meta: ??
succ (?? as S1) S2 :- $constraint (succ S1 S2) [S1].

% when the meta gets e value, we check universe levels
% the cuts rule out the clauses of PTS_cic
succ (s+type U1) (s+type U2) :- !, llt U1 U2.
succ (s+cprop U1) (s+type U2) :- !, llt U1 U2.

% max issued by PTS_typing %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (max i i o).

% meta, meta: ??
% max (?? as S1) (?? as S2) S3 :- !, $constraint (max S1 S2 S3) [S1, S2].

% meta can be cprop or type: ??
% max (?? as S1) (s+type U2) (s+type U3) :- !, $constraint (max S1 (s+type U2) (s+type U3)) [S1].
% max (?? as S1) (s+cprop U2) (s+cprop U3) :- !, $constraint (max S1 (s+type U2) (s+cprop U3)) [S1].

% this case is in PTS_cic
% max (?? as S1) s+prop s+prop :- !.

% meta can be prop, cprop, or type: ??.
% max (s+type U1) (?? as S2) S3 :- $constraint (max (s+type U1) S2 S3) [S2].
% max (s+cprop U1) (?? as S2) S3 :- $constraint (max (s+cprop U1) S2 S3) [S2].

% this case is in PTS_cic
% max s+prop s+prop s+prop :- !.

% when metas get e value, we check universe levels
% the cuts rule out the clauses of PTS_cic
% max (s+type U1) (s+type U2) (s+type U3) :- lle U1 U3, lle U2 U3, !.
% max (s+cprop U1) (s+type U2) (s+type U3) :- lle U1 U3, lle U2 U3, !.
% max (s+type U1) (s+cprop U2) (s+cprop U3) :- lle U1 U3, lle U2 U3, !.
% max (s+cprop U1) (s+cprop U2) (s+cprop U3) :- lle U1 U3, lle U2 U3, !.
