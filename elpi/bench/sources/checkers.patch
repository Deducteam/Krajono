diff --git a/prover-debug.sh b/prover-debug.sh
index b450f4c..383a6e3 100755
--- a/prover-debug.sh
+++ b/prover-debug.sh
@@ -39,7 +39,7 @@ cp $TOOLS/Makefile.debug $DEBUG/Makefile
 echo -e "module runner.\\n" >> $RUNNER_MOD_TARGET
 echo -e "sig runner.\\n" >> $RUNNER_SIG_TARGET
 
-if [ $ELEMENTS -ne 1 ]
+if [ $ELEMENTS -lt 1 ]
   then echo "Error: at least one certificate must be given!"
   else
   for (( i=0;i<$ELEMENTS;i++)); do
diff --git a/prover.sh b/prover.sh
index d18bb3f..ce32908 100755
--- a/prover.sh
+++ b/prover.sh
@@ -22,8 +22,8 @@ rm -f $RUNNER_SIG_TARGET
 echo -e "module runner.\\n" >> $RUNNER_MOD_TARGET
 echo -e "sig runner.\\n" >> $RUNNER_SIG_TARGET
 
-if [ $ELEMENTS -ne 1 ]
-  then echo "Error: exactly one certificate must be given!"
+if [ $ELEMENTS -lt 1 ]
+  then echo "Error: at least one certificate must be given!"
   else
   for (( i=0;i<$ELEMENTS;i++)); do
         echo -e "accum_sig ${ARGS[${i}]}.\\n" >> $RUNNER_SIG_TARGET
@@ -33,5 +33,6 @@ if [ $ELEMENTS -ne 1 ]
   `cat $RUNNER_SIG_BASE >> $RUNNER_SIG_TARGET`
   `cat $RUNNER_MOD_BASE >> $RUNNER_MOD_TARGET`
 
-  cd $SRCDIR && make clean>/dev/null && make>/dev/null && $CMD && rm -f $RUNNER_MOD_TARGET $RUNNER_SIG_TARGET
+  cd $SRCDIR && make clean>/dev/null && make>/dev/null && $CMD
+  #cd $SRCDIR && make clean>/dev/null && make>/dev/null && $CMD && rm -f $RUNNER_MOD_TARGET $RUNNER_SIG_TARGET
 fi
diff --git a/src/ELPI b/src/ELPI
new file mode 100644
index 0000000..44a0b1e
--- /dev/null
+++ b/src/ELPI
@@ -0,0 +1,3 @@
+export TJPATH=.:kernel/ljf:kernel/lkf:kernel/imbed:utils:fpc/resolution:tests/eprover:tests/resolution:utils
+
+elpi runner.mod
diff --git a/src/TOOLS/runner.mod.file b/src/TOOLS/runner.mod.file
index 50a0ad3..841b9ea 100644
--- a/src/TOOLS/runner.mod.file
+++ b/src/TOOLS/runner.mod.file
@@ -25,6 +25,10 @@ run :-
   print "Running on problem ", print Name, print ":\n",
   resolve Map F Cert.
 
+run.
+
+main :- run.
+
 resolve [] F Cert :-
   if (entry_point Cert F)
       (print "Success\n==============================================\n")
diff --git a/src/fpc/resolution/paramodulation.sig b/src/fpc/resolution/paramodulation.sig
index bb65c00..072308e 100644
--- a/src/fpc/resolution/paramodulation.sig
+++ b/src/fpc/resolution/paramodulation.sig
@@ -18,7 +18,7 @@ i.e. : the "from" is the first, "into" is the second.
 kind i, arity type.
 
 type ==, =*=		i -> i -> atm.
-infix ==, =*= 45.
+infix ==, =*= 130.
 
 type inSig	A -> o.
 
@@ -28,7 +28,7 @@ type resI, intoI, fromI index.
 type chainI int -> index.
 /* Certificate */
 type c>>, c<< cert -> cert -> cert.
-infix c<<, c>> 30.
+infix c<<, c>> 140.
 type witC cert -> cert.
 type doneWith, reflC, lastC, useC, decOn index -> cert.
 type rewC      	      index -> int -> cert.
diff --git a/src/kernel/ljf/ljf-syntax.sig b/src/kernel/ljf/ljf-syntax.sig
index 1ad8844..554c417 100644
--- a/src/kernel/ljf/ljf-syntax.sig
+++ b/src/kernel/ljf/ljf-syntax.sig
@@ -34,9 +34,9 @@ type all    (A -> form) -> form.
 /* Units */
 type f, t 	form.
 
-infixr &-&, &+& 6.
-infixr !! 5.
-infixr arr 4.
+infixr &-&, &+& 136.
+infixr !! 135.
+infixr arr 134.
 
 type n, p      	       	  atm -> form.
 
diff --git a/src/kernel/lkf/lkf-syntax.sig b/src/kernel/lkf/lkf-syntax.sig
index 1a89e3a..e331aa0 100644
--- a/src/kernel/lkf/lkf-syntax.sig
+++ b/src/kernel/lkf/lkf-syntax.sig
@@ -34,8 +34,8 @@ type all    (A -> form) -> form.
 /* Units */
 type f+,f-, t+,t- 	form.
 
-infixr &-&, &+& 6.
-infixr !-!,!+! 5.
+infixr &-&, &+& 136.
+infixr !-!,!+! 135.
 
 
 type n, p      	       	  atm -> form.
diff --git a/src/runner_06x.mod b/src/runner_06x.mod
new file mode 100644
index 0000000..54556d9
--- /dev/null
+++ b/src/runner_06x.mod
@@ -0,0 +1,57 @@
+module runner_06x.
+
+accumulate col016.
+
+accumulate col037.
+
+accumulate col052.
+
+accumulate col060.
+
+accumulate col061.
+
+accumulate col062.
+
+accumulate col063.
+
+accumulate col064.
+
+accumulate col065.
+
+accumulate lists.
+accumulate debug.
+
+parseInput [(pr I Cl)] f- [] NCl [I] :-
+  negateForm Cl NCl.
+
+parseInput [(pr I Cl) | Ls] F Il (NCl !-! F2) [I | Il2] :-
+  parseInput Ls F Il F2 Il2,
+  negateForm Cl NCl.
+
+negateMap [] [].
+negateMap [(pr I Cl) | Map] [(pr I NCl) | Map2] :-
+  negateForm Cl NCl,
+  negateMap Map Map2.
+
+run :-
+  resProblem Name Ls (resteps C) (map Map),
+  parseInput Ls f- [] F Istate,
+  print "Running on problem ", print Name, print ":\n",
+  negateMap Map Map2,
+  resolve Map2 F (rsteps C (istate Istate)).
+
+run :-
+  problem Name F Cert (map Map),
+  print "Running on problem ", print Name, print ":\n",
+  resolve Map F Cert.
+
+run.
+
+main :- run.
+
+resolve [] F Cert :-
+  if (entry_point Cert F)
+      (print "Success\n==============================================\n")
+		  (print "Fail\n", halt), fail.
+resolve [(pr I C) | R] F Cert :-
+  mapsto I C => resolve R F Cert.
diff --git a/src/runner_06x.sig b/src/runner_06x.sig
new file mode 100644
index 0000000..2558d42
--- /dev/null
+++ b/src/runner_06x.sig
@@ -0,0 +1,28 @@
+sig runner_06x.
+
+accum_sig col016.
+
+accum_sig col037.
+
+accum_sig col052.
+
+accum_sig col060.
+
+accum_sig col061.
+
+accum_sig col062.
+
+accum_sig col063.
+
+accum_sig col064.
+
+accum_sig col065.
+
+accum_sig lists.
+accum_sig base.
+
+type run o.
+type resolve (list (pair int form)) -> form -> cert -> o.
+type parseInput (list (pair int form)) ->  form -> list int -> form -> list int -> o.
+type negateMap (list (pair int form)) -> (list (pair int form)) -> o.
+type negateNA form -> form -> o.
