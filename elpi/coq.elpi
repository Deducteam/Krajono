type tt bool.
type ff bool.

unsafe-cast X X.
type unsafe-cast A -> B -> prop.

if B T _ :- B, !, T.
if _ _ E :- E.

fail-with err :- $print err, fail.

mode (rev i o).
rev L RL  :- rev-aux L []  RL .
rev-aux [X|XS]  ACC  -> R :- rev-aux XS [X|ACC] R. % ->((rec call)) 
rev-aux []      L    -> L.

mode (append i i o).
append [X|XS] L [X|L1]  :- append XS L L1 .
append [] L L .

spy P :- $print "----<<---- enter: " {$counter "run"} P, P, $print "---->>---- exit: " P, !.
spy P :- $print "---->>---- fail: " P, fail.

list-chop [] 0 0 [] [].
list-chop [X|XS] 0 M LN [X|LM] :- !, M1 is M - 1, list-chop XS 0 M1 LN LM.
list-chop [X|XS] N M [X|LN] LM :- N1 is N - 1, list-chop XS N1 M LN LM.

take 0 _ [].
take N [X|XS] [X|L] :- N1 is N - 1, take N1 XS L.

drop 0 L L.
drop N [_|XS] L :- N1 is N - 1, drop N1 XS L.

test-list-chop :-
  not (list-chop [] 1 2 _ _).
  list-chop [a,b,c] 1 2 [a] [b,c].

subst-prod [] P P.
subst-prod [X|XS] (prod _ _ F) P :- subst-prod XS (F X) P.

subst-lam [] T T.
subst-lam [X|XS] (lam _ _ F) T :- subst-lam XS (F X) T.

prod-2-lam (prod _ T F) (lam _ T R) :- !, pi x\ prod-2-lam (F x) (R x).
prod-2-lam X X.

type fold (A -> B -> A -> prop) -> list B -> A -> A -> prop.
fold _ [] A A.
fold F [X|XS] A R :- F A X Y, fold F XS Y R.

type map (A -> B -> prop) -> list A -> list B -> prop.
map _ [] [].
map F [X|XS] [Y|YS] :- F X Y, map F XS YS.

type map2 (A -> B -> C -> prop) -> list A -> list B -> list C -> prop.
map2 _ [] [] [].
map2 F [X|XS] [Y|YS] [Z|ZS] :- F X Y Z, map2 F XS YS ZS.

mode (nth-ctx i i o o o).
type nth-ctx int -> list A -> list A -> A -> list A -> prop.
nth-ctx 0 [X|XS] [] X XS :- !.
nth-ctx N [X|XS] [X|L] Nth R :- !, N1 is N - 1, nth-ctx N1 XS L Nth R.
nth-ctx _ _ _ _ _ :- $print "nth-ctx", halt.

nth 0 [X|_] X :- !.
nth N [_|XS] R :- !, N1 is N - 1, nth N1 XS R.
nth _ _ _ :- $print "nth", halt.

ignore P :- P, !.
ignore _.

%%%%% terms %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

macro @kn :- string.
macro @name :- string.
macro @args :- list term.

% invariant: invalid (app [match ..]) and app ([fix ..]) since their nodes
% do carry arguments already

type app   @args -> term.                   % app [hd|args]
type lam   @name -> term -> (term -> term) -> term.      % lam ty f
type prod  @name -> term -> (term -> term) -> term.      % prod src f
type sort  universe -> term.                    % sort univ
type let   @name -> term -> term -> (term -> term) -> term.                % let ty bo t
type match term -> term -> list term -> term.   % match t p [branch])
type fix   @name -> int -> (term -> term) -> term. % fix rno ty bo
type indt  @kn -> term.                        % indt kn
type indc  @kn -> term.                        % indc kn
type const @kn -> term.                        % const kn

type prop universe.
type typ A -> universe.
macro @type :- (sort (typ _)).
macro @prop :- (sort prop).

macro @rex :- "\\(Coq.Init.\\(Datatypes\\|Peano\\)\\|Coq.Vectors\\)\\.".
type pp A -> B -> prop.
mode (pp i o).
pp (app L) (app L1) :- !, pp-list L L1.
pp (lam N T F) (lam N T1 F1) :- !, pp T T1, pi x\ (pp x N :- !) => pp (F x) (F1 x).
pp (let N T B F) (let N T1 B1 F1) :- !, pp T T1, pp B B1, pi x\ (pp x N :- !) => pp (F x) (F1 x).
pp (fix N R B) (fix N R B1) :- !, pi f\ (pp f N :- !) => pp (B f) (B1 f).
pp (match A R B) (match A1 R1 B1) :- !, pp A A1, pp R R1, pp-list B B1.
pp (indt KN) S :- !, $rex_replace  @rex "" KN S.
pp (indc KN) S :- !, $rex_replace  @rex "" KN S.
pp (const KN) S :- !, $rex_replace @rex "" KN S.
pp X X :- !.
pp _ "unprintable" :- !. % cannot fail

mode (pp-list i o).
pp-list [] [].
pp-list [X|XS] [Y|YS] :- !, pp X Y, pp-list XS YS.

type safe-dest-app term -> term -> list term -> prop.
safe-dest-app (app [X|XS]) X XS :- !.
safe-dest-app X X [].

type mk-app term -> list term -> term -> prop.
mk-app HD [] HD :- !.
mk-app (app L) Args (app LArgs) :- !, append L Args LArgs.
mk-app (?? as K) [A|Args] R :- !, unsafe-cast K K', mk-app (K' A) Args R.
mk-app HD Args (app [HD|Args]).

%%%%% whd in out %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (match-red i i i i o o).
match-red KN KAargs BL C X XC :-
  coq-env-indc KN Lno _ Ki _,
  drop Lno KAargs Args,
  nth Ki BL Bi,
  hd-beta {mk-app Bi Args} C X XC.

mode (fix-red i i i i i i i o o). 
fix-red N Rno F LA KN KA RA X XC :-
  ArgsWRedRecNo := append LA [{mk-app (indc KN) KA}|RA],
  hd-beta {mk-app (F (fix N Rno F)) ArgsWRedRecNo} [] X XC.

macro @stack :- list term.
mode (whd i i o o).
type whd term -> @stack -> term -> @stack -> prop.
% FIXME does not keep the reduced, see whd-indc
% whd A B C D :- $print (whd A B C D), fail.

whd (app [Hd|Args]) C X XC :- !, whd Hd {append Args C} X XC.
whd (lam _ _ _ as X) [] X [] :- !.
whd (lam N T F) [A|AS] X XC :- !, whd (let N T A F) AS X XC.
% whd (lam N T F) [A|AS] X XC :- !, whd (F A) AS X XC.
whd (const KN) C X XC :- unfold KN C D DC, !, whd D DC X XC.
whd (match A _ L) C X XC :- whd-indc A KN KA, !,
  whd {match-red KN KA L C} X XC.
whd (fix N Rno F) C X XC :- nth-ctx Rno C LA A RA, whd-indc A KN KA, !,
  whd {fix-red N Rno F LA KN KA RA} X XC.
whd (let _  _ B F) C X XC :- !,
  (pi x\ val x B _BN => whd (F x) C (F1 x) (C1 x)), X = F1 B, XC = C1 B.
% whd (let _  _ B F) C X XC :- !, whd (F B) C X XC.
whd N C X XC :- $is_name N, val N V VN, !, cache VN (whd V []), whd VN C X XC.
whd X C X C.

strong T C X XC :-
  whd T C X C1, map (x\y\sigma w wc\ strong x [] w wc, zip w wc y) C1 XC.

mode (cache i i).
cache (?? as K) F :- !, F X XC, zip X XC K.
cache _ _.

mode (hd-beta i i o o).
hd-beta (app [Hd|Args]) S X C :- !, hd-beta Hd {append Args S} X C.
% hd-beta (lam N T F) [A|AS] X C :- !, hd-beta (let N T A F) AS X C.
hd-beta (lam N T F) [A|AS] X C :- !, hd-beta (F A) AS X C.
hd-beta (?? as K) A X [] :- !, mk-app K A X.
hd-beta X C X C.

mode (zip i i o).
zip T A R :- mk-app T A R.

mode (hd-beta-zeta i i o o).
hd-beta-zeta (app [Hd|Args]) S X C :- !, hd-beta-zeta Hd {append Args S} X C.
hd-beta-zeta (lam N T F) [A|AS] X C :- !, hd-beta-zeta (F A) AS X C.
hd-beta-zeta (let N T B F) AS X C :- !, hd-beta-zeta (F B) AS X C.
hd-beta-zeta (?? as K) A X [] :- !, mk-app K A X.
hd-beta-zeta X C X C.

hd-beta-zeta-reduce T R :- hd-beta-zeta T [] H S, zip H S R.

unfold KN A BO BOC :- coq-env-const KN _ B, hd-beta B A BO BOC.

whd-indc A KN KA :- whd A [] VA C, !, VA = indc KN, KA = C.

type tt bool.
type ff bool.
% invariant: hd-beta terms
% we start with ff, tt to handle symmetric cases
% NOTE: rec-calls with unify (ensured hd-beta + ff) , symmetric rules are typically !
% NOTE: asymmetric rules are not ! otherwise the flip rule is killed
% NOTE: whd are !
type unif term -> @stack -> term -> @stack -> bool -> prop.
mode (unif i i i i i).
% unif A C1 B  C2 M :- $print "unif" {$counter "run"} M {pp A} C1 {pp B} C2, fail.

% flexible cases
unif (?? as K) [] T B _ :- $llam_unif K {zip T B}, !.
unif T B (?? as K) [] _ :- $llam_unif K {zip T B}, !.
unif (?? V L) [] T B _ :- bind-list L {zip T B} V, !.
unif T B (?? V L) [] _ :- bind-list L {zip T B} V, !.

unif (sort _) [] (sort _) [] _ :- !.  % FIXME
unif (indt KN) B1 (indt KN) B2 _ :- !, unify-ctxs B1 B2.
unif (indc KN) B1 (indc KN) B2 _ :- !, unify-ctxs B1 B2.
unif X B1 (indt KN as T2) B2 ff :- !, unif T2 B2 {whd X B1} tt.
unif X B1 (indc KN as T2) B2 ff :- !, unif T2 B2 {whd X B1} tt.

% whd-iota? a bit aggressive
unif (match A _ L) B1 T B2 M :- whd-indc A KN KA, !,
  unif {match-red KN KA L B1} T B2 M.
unif (fix N Rno F) B1 T B2 M :- nth-ctx Rno B1 LA A RA, whd-indc A KN KA, !,
  unif {fix-red N Rno F LA KN KA RA} T B2 M.

% ctx (stuck terms)
unif (lam N T1 F1) [] (lam M T2 F2) [] _ :- !, ignore(N = M), unify T1 T2,
  pi x\ (pp x N :- !) => (of x T1 x) => unify (F1 x) (F2 x). % of needed ?
unif (prod N T1 F1) [] (prod M T2 F2) [] _ :- !, ignore(N = M), unify T1 T2,
  pi x\ (pp x N :- !) => (of x T1 x) => unify (F1 x) (F2 x). % of needed ?
unif (match A1 R1 L1) B1 (match A2 R2 L2) B2 _ :- !,
  unify A1 A2, unify R1 R2, unify-list L1 L2, unify-ctxs B1 B2.
unif (fix N Rno F1) B1 (fix M Rno F2) B2 _ :- !, ignore(N = M), (pi f\ unify (F1 f) (F2 f)), unify-ctxs B1 B2.

% delta stuff
unif (const C) B1 (const C) B2 _ :-    unify-ctxs B1 B2, !.
unif (const C) B1 T2 B2 M :- unfold C B1 T1' B1', !, unif T1' B1' T2 B2 M.

unif (let N T1 B1 F1) C1 (let M T2 B2 F2) C2 _ :-
  unify T1 T2, unify B1 B2, ignore(N = M),
  (pi x\ (pp x N :- !) => val x B1 _B1N => unify (F1 x) (F2 x)), unify-ctxs C1 C2.
 
% unif (let _ _ B F) C1 T C2 M :- !, $print "L", unif {hd-beta (F B) C1} T C2 M.
unif (let N _ B F) C1 T C2 M :- !,
  pi x\ (pp x N :- !) => val x B _BN => unif {hd-beta (F x) C1} T C2 M.

% heigen variables
unif X C1 Y C2 _ :- $is_name X, $is_name Y, X = Y, unify-ctxs C1 C2.

unif X C1 T C2 M :- $is_name X, val X V _, !, unif {hd-beta V C1} T C2 M. % we could use VN if nonflex

% flip
unif X C1 Y C2 ff :- !, unif Y C2 X C1 tt.

% error
% unif X C1 Y C2 _tt :- !,
%   $print "Error: " {pp {zip X C1}} "vs" {pp {zip Y C2}}. %, halt.

unify-ctxs A B :- unify-list A B.

% the entry points: unify unify-list
mode (unify-list i i).
unify-list [] [].
unify-list [X|XS] [Y|YS] :- unify X Y, unify-list XS YS.
unify A B :- unif {hd-beta A []} {hd-beta B []} ff.

type bind-list list term -> term -> A -> prop.
mode (bind-list i i o).
bind-list [] T T' :- (copy T T').
bind-list [ ?? |VS] T R :- !, pi x\ bind-list VS T (R x).
bind-list [app [C| AS] |VS] T R :- (C = const _ ; C = indt _ ; C = indc _ ; $is_name C), !, 
  pi x\ (pi L\ copy (app[C|L]) x :- unify-list L AS) => bind-list VS T (R x).
bind-list [C|VS] T R :- (C = const _ ; C = indt _ ; C = indc _ ; $is_name C), !,
  pi x\ copy C x => bind-list VS T (R x).

type copy term -> term -> prop.
mode (copy i o).
% copy C W :- $print "copy" C W, fail.
copy X Y :- $is_name X, X = Y, !.
copy X Y :- $is_name X, val X T _, !, copy T Y.
copy (const _ as C) C :- !.
copy (indc _ as C) C :- !.
copy (indt _ as C) C :- !.
copy (sort _ as C) C :- !.
copy (fix N Rno F) (fix N Rno F1) :- !, pi x\ (pp x N :- !) => copy (F x) (F1 x).
copy (match T Rty B) (match T1 Rty1 B1) :- !, copy T T1, copy Rty Rty1, map (copy) B B1.
copy (app L) (app L1) :- !, map copy L L1.
copy (lam N T F) (lam N T1 F1) :- !,
  copy T T1, pi x\ (pp x N :- !) => copy (F x) (F1 x).
copy (let N T B F) (let N T1 B1 F1) :- !,
  copy T T1, copy B B1, pi x\ (pp x N :- !) => copy (F x) (F1 x).
copy (prod N T F) (prod N T1 F1) :- !, copy T T1, pi x\ copy (F x) (F1 x).
copy (?? M L) W :- map copy L L1, mk-app M L1 W.

%%%%% eat-prod head head-ty args-done todo-args refined-app refined-ty %%%%%%%%

mode (eat-prod i i o o o o).

eat-prod Hd Prod Adone []        Res ResTy :- !,
  unify Res {mk-app Hd {rev Adone}}, unify ResTy Prod.

eat-prod Hd Prod Adone [A|Atodo] Res ResTy :-
  if (whd Prod [] (prod _ Src Tgt) [])
    (of A Src ResA, eat-prod Hd (Tgt ResA) [ResA|Adone] Atodo Res ResTy)
    (fail-with "not a prod").

type of term -> term -> term -> prop.
mode (of i o o).

% of A T _ :- $print (of A T), fail.

% of T Ty ResT :- $print "of" T Ty ResT, fail.
macro @pi-of N T F :- pi x\ (pi Tx\ of x Tx x :- !, unify T Tx) => (pp x N :- !) => F x.

of (lam N S F) LamTy (lam N S2 F2) :-
  of (prod N S _T) (sort _U) (prod M S2 T),
  unify LamTy (prod M S2 T),
  @pi-of N S2 x\ of (F x) (T x) (F2 x).

of (app [Hd|Args]) TyApp App :-
  %$print "APP " {pp (app [Hd|Args])},
  of Hd Prod Hd1, eat-prod Hd1 Prod [] Args App TyApp.

of (prod N S F) ProdTy (prod N ResS ResF) :-
  of S (sort U1) ResS,
  (@pi-of N ResS x\ of (F x) (sort U2) (ResF x)),
  % pts U1 U2 U,
  unify ProdTy (sort U).

of (match T Rty Bs) ResRtyInst (match ResT ResRty ResBs) :-
  of T TyT ResT,
  % T : TyT = (indt KN) LArgs RArgs, and (indt KN) : Ty
  safe-dest-app TyT (indt KN) Args,
  coq-env-indt KN _IsInd Lno Rno Ty Kn Ks,
  list-chop Args Lno Rno LArgs RArgs,
  % fix LArgs on ind ty and constructors ty
  subst-prod LArgs Ty TyLArgs,
  map (subst-prod LArgs) Ks KsLArgs,
  % Rty skeleton (uknown ending) = lam rargs, lam e : indt largs rargs, ?
  mk-rty [] {mk-app (indt KN) LArgs} TyLArgs ResRtyRaw, 
  of ResRtyRaw _ ResRty, unify Rty ResRty,
  % Rty must type each branch
  map2 (mk-bty Rty Lno Rno) KsLArgs Kn BsTy,
  map2 of Bs BsTy ResBs,
  % Outside type
  unify {mk-app ResRty {append RArgs [ResT]}} ResRtyInst.

spy-of A B C :- spy(of A B C).

of (let N Ty Bo F) TyFx (let N ResTy ResBo ResF) :-
  of Ty (sort _) ResTy, of Bo ResTy ResBo, of _ ResTy ResBoNorm,
  @pi-of N ResTy x\ val x ResBo ResBoNorm => of (F x) TyFx (ResF x).

of (fix N Rno BoF) ResTy (fix N Rno ResBoF) :-
  (@pi-of N TyF f\ of (BoF f) ResTy (ResBoF f)).
 
type mk-rty list term -> term -> term -> term -> prop. 
mk-rty ARGS HD (prod N S T) (lam N S F) :- !,
  pi x\ mk-rty [x|ARGS] HD (T x) (F x).
mk-rty ARGS HD _ (lam _ IndApp _FRESH) :-
  mk-app HD {rev ARGS} IndApp.

type mk-bty term -> int -> int -> term -> @kn -> term -> prop.
mk-bty Rty Lno Rno (prod N S T) Ki (prod N S B) :- !,
  pi x\ mk-bty Rty Lno Rno (T x) Ki (B x).
mk-bty Rty Lno Rno T Ki AppRtyNorm :-
  safe-dest-app T (indt _) Args,
  list-chop Args Lno Rno LArgs RArgs,
  mk-app Rty {append RArgs [{mk-app (indc Ki) {append LArgs RArgs}}]} AppRty,
  hd-beta-zeta-reduce AppRty AppRtyNorm.

of (sort prop) (sort (typ _)) (sort prop).
of (sort (typ T)) (sort (typ T+1)) (sort (typ T)) :- coq-univ-ltn T T+1.

pts prop prop prop.
pts (typ _) prop prop.
pts (typ T1) (typ T2) (typ M) :- coq-univ-leq T1 T2 M.

coq-univ-leq _ _ _. % TODO
coq-univ-ltn _ _. % TODO

of (indt KN as X) T X :- !, coq-env-indt KN _ _ _ T1 _ _, unify T T1.
of (indc KN as X) T X :- !, coq-env-indc KN _ _ _ T.
of (const KN as X) T X :- !, coq-env-const KN T _.

%%%% env %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

macro @nat :- "Coq.Init.Datatypes.nat".
macro @nat0 :- "Coq.Init.Datatypes.O".
macro @natS :- "Coq.Init.Datatypes.S".
macro @vect :- "Coq.Vectors.Vector.t".
macro @vectN :- "Coq.Vectors.Vector.vnil".
macro @vectC :- "Coq.Vectors.Vector.vcons".

type coq-env-indc @kn -> int -> int -> int -> term -> prop.
type coq-env-indt @kn -> bool -> int -> int -> term -> list @kn -> list term -> prop .

coq-env-indt @nat tt 0 0 @type Kn Kt :-
 Kn = [@nat0,@natS], map (x\ y\ sigma Ki\ coq-env-indc x 0 0 Ki y) Kn Kt.
coq-env-indc @nat0 0 0 0 (indt @nat).
coq-env-indc @natS 0 0 1 (prod "p" (indt @nat) _\ indt @nat).

coq-env-indt @vect tt 1 1 (prod "t" @type _\ prod "n" (indt @nat) _\ @type) Kn Kt :-
 Kn = [@vectN,@vectC], map (x\ y\ sigma Ki\ coq-env-indc x 1 1 Ki y) Kn Kt.
coq-env-indc @vectN 1 1 0 (prod "t" @type t\ app [indt @vect, t, indc @nat0]).
coq-env-indc @vectC 1 1 1 (prod "t" @type t\ prod "n" (indt @nat) n\
                      prod "x" t x\ prod "xs" (app [indt @vect, t, n]) xs\
                       app [indt @vect, t, app [indc @natS,n]]).

macro @plus :- "Coq.Init.Peano.plus".
macro @mult :- "Coq.Init.Peano.mult".
macro @minus :- "Coq.Init.Peano.minus".
macro @append :- "Coq.Vectors.Vector.append".

coq-env-const @plus Ty Bo :-
  Ty = (prod "m" (indt @nat) _\ prod "n" (indt @nat) _\ (indt @nat)),
  Bo = (fix "f" 0 f\ lam "n" (indt @nat) n\ lam "m" (indt @nat) m\
           match n (lam "_" (indt @nat) _\ (indt @nat)) [
             m,
             lam "n1" (indt @nat) n1\app [indc @natS,app [f,n1,m]]
           ]).
coq-env-const @mult Ty Bo :-
  Ty = (prod "m" (indt @nat) _\ prod "n" (indt @nat) _\ (indt @nat)),
  Bo = (fix "f" 0 f\ lam "n" (indt @nat) n\ lam "m" (indt @nat) m\
           match n (lam "_" (indt @nat) _\ (indt @nat)) [
             indc @nat0,
             lam "n1" (indt @nat) n1\app [const @plus,m,app [f,n1,m]]
           ]).
coq-env-const @minus Ty Bo :-
  Ty = (prod "m" (indt @nat) _\ prod "n" (indt @nat) _\ (indt @nat)),
  Bo = (fix "f" 0 f\ lam "n" (indt @nat) n\ lam "m" (indt @nat) m\
           match n (lam "_" (indt @nat) _\ (indt @nat)) [
             indc @nat0,
             lam "n1" (indt @nat) n1\
               match m (lam "_" (indt @nat) _\ (indt @nat)) [
               n,
               lam "m1" (indt @nat) m1\ app [f,n1,m1]]
           ]).

coq-env-const @append Ty Bo :-
  Ty = (prod "t" @type t\ prod "n1" (indt @nat) n1\ prod "n2" (indt @nat) n2\
           prod "v1" (app [indt @vect,t,n1]) _\
           prod "v2" (app [indt @vect,t,n2]) _\
             (app [indt @vect,t,app [const @plus,n1,n2]])),
  Bo = (lam "t" @type t\
          fix "f" 0 f\ lam "n1" (indt @nat) n1\ lam "n2" (indt @nat) n2\
                   lam "v1" (app [indt @vect,t,n1]) v1\
                   lam "v2" (app [indt @vect,t,n2]) v2\
                     match v1 (lam "i" (indt @nat) i\ 
                                lam "w" (app [indt @vect,t,i]) w\
                        (app [indt @vect,t,app[const @plus,i,n2]])) [
                       v2,
                       lam "m" (indt @nat) m\
                       lam "x" t x\
                       lam "v" (app [indt @vect,t,m]) v\
                         app [indc @vectC,t,
                           app[const @plus,m,n2], x, app[f,m,n2,v,v2]]
                     ]).

%%%% meta %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

of (?? as K) X Y :- !, Y = K, $constraint (of K X Y) K.

of T Ty T1 :- $print "Ill typed: " T `: Ty "~>" T1, halt.

constraint of {
  
}

main :- % test0, !,
        % test1, !, % $print_delayed,
        % test2, !, % $print_delayed,
        % test3, !, % $print_delayed,
        % test4, !, % $print_delayed,
        % test4-1, !, % $print_delayed,
        test5, !, % $print_delayed,
        true. % FIXME : in some cases more than 1 solution!!!..

test0 :-
  $print "\nWhd",
  whd (let "x" (indt @nat) (app [const @plus, indc @nat0, indc @nat0]) x\
          app[const @plus,x,app[toto,x]]) [] A B,
  $print "term" A "stack" B.

test3 :-
  $print "\nChecking vector reversal",
  coq-env-const @append T B,
  of B T B1, $print {pp B1}.

test2 :-
  $print "\nChecking nat addition",
  coq-env-const @plus T B,
  of B T B1, $print {pp B1},
  $print "\nChecking nat multiplication",
  coq-env-const @mult TM BM,
  of BM TM BM1, $print {pp BM1},
  $print "\nChecking nat subtraction",
  coq-env-const @minus TS BS,
  of BS TS BS1, $print {pp BS1}.

test1 :-
  $print "\nBuild of match return predicate shape",
  of (match (app [indc @vectN, indt @nat]) _ _) _ M,
  $print {pp M}.

test4 :-
  $print "\nBind",
  coq-env-const @append _ Bo,
  unify (V (indt @vect) (const @plus)) Bo, !,
    $print {pp (lam "VECT" _ (x\lam "PLUS" _ (y\ V x y)))}.

test4-1 :-
  $print "\nBind",
  pi x f\ sigma V\ unify (V (app[f, x, app[const @plus, indc @nat0, x]]))
                           (app[f,app[f, app[const @plus,indc @nat0, x], x]]),
    $print {pp (lam "fx0+x" _ x\ (V x))}.

macro @seven :-
  app[indc @natS, app[indc @natS, app[indc @natS, app[indc @natS,
   app[indc @natS, app[indc @natS, app[indc @natS, indc @nat0]]]]]]].

test5 :-
  $print "\nUnif",
  unify (let "mx" (indt @nat) (app[const @mult,@seven,@seven]) m\
          let "n" (indt @nat) (app[const @mult,m,m]) n\
              app[const @minus,app[indc @natS,n],n])
         (app[indc @natS, indc @nat0]),
  $print X.
/*
  unify (let "n" (indt @nat)
            (app[const @mult,@seven,app[const @mult,@seven,@seven]]) n\
         let "m" (indt @nat) 
            (app[const @minus, n, n]) m\
           app[const @minus, app[indc @natS,m], m]) (indc @nat0).
*/
% vim:set ft=lprolog spelllang=:
