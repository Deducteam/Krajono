type tt bool.
type ff bool.

unsafe-cast X X.
type unsafe-cast A -> B -> prop.

if B T _ :- B, !, T.
if _ _ E :- E.

fail-with err :- $print err, fail.

rev L RL  :- rev-aux L []  RL .
rev-aux [X|XS]  ACC  -> R :- rev-aux XS [X|ACC] R. % ->((rec call)) 
rev-aux []      L    -> L.

append [X|XS] L [X|L1]  :- append XS L L1 .
append [] L L .

type safe-dest-app term -> term -> list term -> prop.
safe-dest-app (app [X|XS]) X XS :- !.
safe-dest-app X X [].

type mk-app term -> list term -> term -> prop.
mk-app HD [] HD :- !.
mk-app (app L) Args (app LArgs) :- !, append L Args LArgs.
mk-app HD Args (app [HD|Args]).

spy P :- $print "----<<---- enter: " P, P, $print "---->>---- exit: " P, !.
spy P :- $print "---->>---- fail: " P, fail.

list-chop [] 0 0 [] [].
list-chop [X|XS] 0 M LN [X|LM] :- !, M1 is M - 1, list-chop XS 0 M1 LN LM.
list-chop [X|XS] N M [X|LN] LM :- N1 is N - 1, list-chop XS N1 M LN LM.

take 0 _ [].
take N [X|XS] [X|L] :- N1 is N - 1, take N1 XS L.

drop 0 L L.
drop N [_|XS] L :- N1 is N - 1, drop N1 XS L.

test-list-chop :-
  not (list-chop [] 1 2 _ _).
  list-chop [a,b,c] 1 2 [a] [b,c].

subst-prod [] P P.
subst-prod [X|XS] (prod _ F) P :- subst-prod XS (F X) P.

subst-lam [] T T.
subst-lam [X|XS] (lam _ _ F) T :- subst-lam XS (F X) T.

prod-2-lam (prod T F) (lam _ T R) :- !, pi x\ prod-2-lam (F x) (R x).
prod-2-lam X X.

type fold (A -> B -> A -> prop) -> list B -> A -> A -> prop.
fold _ [] A A.
fold F [X|XS] A R :- F A X Y, fold F XS Y R.

type map (A -> B -> prop) -> list A -> list B -> prop.
map _ [] [].
map F [X|XS] [Y|YS] :- F X Y, map F XS YS.

type map2 (A -> B -> C -> prop) -> list A -> list B -> list C -> prop.
map2 _ [] [] [].
map2 F [X|XS] [Y|YS] [Z|ZS] :- F X Y Z, map2 F XS YS ZS.

mode (nth-ctx i i o o o).
type nth-ctx int -> list A -> list A -> A -> list A -> prop.
nth-ctx 0 [X|XS] [] X XS :- !.
nth-ctx N [X|XS] [X|L] Nth R :- !, N1 is N - 1, nth-ctx N1 XS L Nth R.
nth-ctx _ _ _ _ _ :- $print "nth-ctx", halt.

nth 0 [X|_] X :- !.
nth N [_|XS] R :- !, N1 is N - 1, nth N1 XS R.
nth _ _ _ :- $print "nth", halt.

ignore P :- P, !.
ignore _.

%%%%% terms %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

macro @kn :- string.
macro @name :- string.

type app   list term -> term.                   % app [hd|args]
type lam   @name -> term -> (term -> term) -> term.      % lam ty f
type prod  term -> (term -> term) -> term.      % prod src f
type sort  universe -> term.                    % sort univ
type let   term -> term -> (term -> term) -> term.                % let ty bo t
type match term -> term -> list term -> term.   % match t p [branch])
type fix   @name -> int -> (term -> term) -> term. % fix rno ty bo
type indt  @kn -> term.                        % indt kn
type indc  @kn -> term.                        % indc kn
type const @kn -> term.                        % const kn

type prop universe.
type typ A -> universe.
macro @type :- (sort (typ _)).
macro @prop :- (sort prop).

macro @rex :- "\\(Coq.Init.\\(Datatypes\\|Peano\\)\\|Coq.Vectors\\)\\.".
type pp A -> B -> prop.
pp (app L) (app L1) :- !, pp-list L L1.
pp (lam N T F) (lam N T1 F1) :- !, pp T T1, pi x\ pp x N => pp (F x) (F1 x).
pp (fix N R B) (fix N R B1) :- !, pi f\ pp f N => pp (B f) (B1 f).
pp (match A R B) (match A1 R1 B1) :- !, pp A A1, pp R R1, pp-list B B1.
pp (indt KN) S :- !, $rex_replace  @rex "" KN S.
pp (indc KN) S :- !, $rex_replace  @rex "" KN S.
pp (const KN) S :- !, $rex_replace @rex "" KN S.
pp X X :- !.
pp _ "unprintable". % cannot fail
pp-list [] [].
pp-list [X|XS] [Y|YS] :- !, pp X Y, pp-list XS YS.

%%%%% whd-w-delta in out %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

mode (match-red i i i o).
match-red KN KAargs BL X :-
  coq-env-indc KN Lno _ Ki _,
  drop Lno KAargs Args,
  nth Ki BL Bi, % inefficient
  hd-beta {mk-app Bi Args} X.

mode (fix-red i i i i i i i o). 
fix-red N Rno F LA KN KA RA X :-
  mk-app (F (fix N Rno F)) {append LA [{mk-app (indc KN) KA}|RA]} X.

mode (whd-w-delta i o).
% FIXME does not keep the reduced, see whd-indc
whd-w-delta (app [lam _ _ F, A|AS]) X :- !, whd-w-delta {mk-app (F A) AS} X.
whd-w-delta (const KN) X :- unfold KN [] X.
whd-w-delta (app [const KN|AS]) X :- unfold KN AS B, !, whd-w-delta B X.
whd-w-delta (match A _ L) X :- whd-indc A KN KA, !,
  whd-w-delta {match-red KN KA L} X.
whd-w-delta (app [match A _ L|AS]) X :- whd-indc A KN KA, !,
  whd-w-delta (app [{match-red KN KA L}|AS]) X.
whd-w-delta (app [fix N Rno F|AS]) X :- nth-ctx Rno AS LA A RA, whd-indc A KN KA, !,
  whd-w-delta {fix-red N Rno F LA KN KA RA} X.
whd-w-delta X X.

mode (hd-beta i o).
hd-beta (app [lam _ _ F, A|AS]) R :- !, hd-beta {mk-app (F A) AS} R.
hd-beta (app [?? as K, A|AS]) R :- !, unsafe-cast K K', hd-beta {mk-app (K' A) AS} R.
hd-beta R R. % check delay, which gets instantiated?

unfold KN A BO :- coq-env-const KN _ B, hd-beta {mk-app B A} BO.

whd-indc A KN KA :- whd-w-delta A B, !, safe-dest-app B (indc KN) KA.

mode (unif i i).
%unif A B :- $print "unif" {pp A} {pp B}, fail.

unif (?? as K) T :- K = T. % FIXME
unif T (?? as K) :- K = T. % FIXME
unif (sort _) (sort _) :- !.  % FIXME
unif (indt KN) (indt KN) :- !.
unif (indc KN) (indc KN) :- !.
unif (const C) (const C) :- !.

% whd-no-hd-delta
unif (app [lam _ _ F,A|AS]) T :- !, unif {hd-beta {mk-app (F A) AS}} T.
unif T (app [lam _ _ F,A|AS]) :- !, unif T {hd-beta {mk-app (F A) AS}}.
unif (app [match A _ L|AS]) T :- whd-indc A KN KA, !, unif (app [{match-red KN KA L}|AS]) T.
unif (match A _ L) T :- whd-indc A KN KA, !, unif {match-red KN KA L} T.
unif T (match A _ L) :- whd-indc A KN KA, !, unif T {match-red KN KA L}.
unif T (app [match A _ L|AS]) :- whd-indc A KN KA, !, unif T (app [{match-red KN KA L}|AS]).
unif (app [fix N Rno F|AS]) T :- nth-ctx Rno AS LA A RA, whd-indc A KN KA, !,
  unif {fix-red N Rno F LA KN KA RA} T.
unif T (app [fix N Rno F|AS]) :- nth-ctx Rno AS LA A RA, whd-indc A KN KA, !,
  unif T {fix-red N Rno F LA KN KA RA}.

% ctx (stuck terms)
unif (app [indt KN|L1]) (app [indt KN|L2]) :- !, unif-list L1 L2.
unif (app [indc KN|L1]) (app [indc KN|L2]) :- !, unif-list L1 L2.
unif (lam N T1 F1) (lam M T2 F2) :- !, ignore(N = M), unif T1 T2,
  pi x\ ((pp x N :- !), unif x x, of x T1 x) => unif (F1 x) (F2 x). % of needed ?
unif (prod T1 F1) (prod T2 F2) :- !, unif T1 T2,
  pi x\ (unif x x, of x T1 x) => unif (F1 x) (F2 x). % of needed ?
unif (match A RA L1) (match B RB L2) :-  !, unif A B, unif RA RB, unif-list L1 L2.
unif (app [match A RA L1|XS]) (app [match B RB L2|YS]) :- !,
  unif A B, unif RA RB, unif-list L1 L2, unif-list XS YS.
unif (fix _ Rno F1) (fix _ Rno F2) :- !, pi f\ unif f f => unif (F1 f) (F2 f).
unif (app [fix _ Rno F1|A1]) (app [fix _ Rno F2|A2]) :-
  !, unif-list A1 A2, pi f\ unif f f => unif (F1 f) (F2 f).

% delta stuff
unif (app [const C|L1]) (app [const C|L2]) :-    unif-list L1 L2.
unif (app [const C|L1]) T :- unfold C L1 T', !, unif T' T.
unif T (app [const C|L2]) :- unfold C L2 T', !, unif T T'.
unif (const C) T :- unfold C [] T', !, unif T' T.
unif T (const C) :- unfold C [] T', !, unif T T'.

% heigen variables applied
unif (app [X|XS]) (app [Y|YS]) :- unif X Y, !, unif-list XS YS.

unif X Y :- !, $print "Error: " {pp X} {pp Y} " barebone " X " vs " Y.

mode (unif-list i i).
unif-list [] [].
unif-list [X|XS] [Y|YS] :- unif X Y, unif-list XS YS.

%%%%% eat-prod head head-ty args-done todo-args refined-app refined-ty %%%%%%%%

mode (eat-prod i i o o o o).

eat-prod Hd Prod Adone []        Res ResTy :- !,
  unif Res (app [Hd|{rev Adone}]), unif ResTy Prod.

eat-prod Hd Prod Adone [A|Atodo] Res ResTy :-
  if (whd-w-delta Prod (prod Src Tgt))
    (of A Src ResA, eat-prod Hd (Tgt ResA) [ResA|Adone] Atodo Res ResTy)
    (fail-with "not a prod").

type of term -> term -> term -> prop.
mode (of i o o).

% of T Ty _ :- $print "of" T Ty, fail.

of (lam N S F) (prod S2 T) (lam N S2 F2) :- /*FIXME bidir */
  of S (sort _U) S2,
  pi x\ (pi Tx\ of x Tx x :- !, unif S2 Tx) =>
        (pp x N :- !) =>
        (unif x x) =>
          of (F x) (T x) (F2 x).

of (app [Hd|Args]) TyApp App :-
  %$print "APP " {pp (app [Hd|Args])},
  of Hd Prod Hd1, eat-prod Hd1 Prod [] Args App TyApp.

of (prod S F) (sort U) (prod ResS ResF) :-
  of S (sort U1) ResS, (pi x \ (of x (sort U1) x) => (unif x x) => of (F x) (sort U2) (ResF x)),
  pts U1 U2 U.

of (match T Rty Bs) ResRtyInst (match ResT ResRty ResBs) :-
  of T TyT ResT,
  % T : TyT = (indt KN) LArgs RArgs, and (indt KN) : Ty
  safe-dest-app TyT (indt KN) Args,
  coq-env-indt KN _IsInd Lno Rno Ty Kn Ks,
  list-chop Args Lno Rno LArgs RArgs,
  % fix LArgs on ind ty and constructors ty
  subst-prod LArgs Ty TyLArgs,
  map (subst-prod LArgs) Ks KsLArgs,
  % Rty skeleton (uknown ending) = lam rargs, lam e : indt largs rargs, ?
  mk-rty [] {mk-app (indt KN) LArgs} TyLArgs ResRtyRaw, 
  of ResRtyRaw _ ResRty, unif Rty ResRty,
  % Rty must type each branch
  map2 (mk-bty Rty Lno Rno) KsLArgs Kn BsTy,
  map2 of Bs BsTy ResBs,
  % Outside type
  unif {mk-app ResRty {append RArgs [ResT]}} ResRtyInst.

spy-of A B C :- spy(of A B C).

of (let Ty Bo F) TyFx (let ResTy ResBo ResF) :-
  of Ty (sort _) ResTy,
  of Bo ResTy ResBo,
  pi x\ (of x ResTy x, val x ResBo) => of (F x) TyFx (ResF x).

of (fix N Rno BoF) ResTy (fix N Rno ResBoF) :-
  pi f\ (pp f N) => (of f ResTy f) => (unif f f) => of (BoF f) ResTy (ResBoF f).
 
type mk-rty list term -> term -> term -> term -> prop. 
mk-rty ARGS HD (prod S T) (lam _ S F) :- !,
  pi x\ mk-rty [x|ARGS] HD (T x) (F x).
mk-rty ARGS HD _ (lam _ IndApp _FRESH) :-
  mk-app HD {rev ARGS} IndApp.

type mk-bty term -> int -> int -> term -> @kn -> term -> prop.
mk-bty Rty Lno Rno (prod S T) Ki (prod S B) :- !,
  pi x\ mk-bty Rty Lno Rno (T x) Ki (B x).
mk-bty Rty Lno Rno T Ki AppRtyNorm :-
  safe-dest-app T (indt _) Args,
  list-chop Args Lno Rno LArgs RArgs,
  mk-app Rty {append RArgs [{mk-app (indc Ki) {append LArgs RArgs}}]} AppRty,
  hd-beta AppRty AppRtyNorm.

of (sort prop) (sort (typ _)) (sort prop).
of (sort (typ T)) (sort (typ T+1)) (sort (typ T)) :- coq-univ-ltn T T+1.

pts prop prop prop.
pts (typ _) prop prop.
pts (typ T1) (typ T2) (typ M) :- coq-univ-leq T1 T2 M.

coq-univ-leq _ _ _. % TODO
coq-univ-ltn _ _. % TODO

of (indt KN as X) T X :- !, coq-env-indt KN _ _ _ T1 _ _, unif T T1.
of (indc KN as X) T X :- !, coq-env-indc KN _ _ _ T.
of (const KN as X) T X :- !, coq-env-const KN T _.

%%%% env %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

macro @nat :- "Coq.Init.Datatypes.nat".
macro @nat0 :- "Coq.Init.Datatypes.O".
macro @natS :- "Coq.Init.Datatypes.S".
macro @vect :- "Coq.Vectors.Vector.t".
macro @vectN :- "Coq.Vectors.Vector.vnil".
macro @vectC :- "Coq.Vectors.Vector.vcons".

type coq-env-indc @kn -> int -> int -> int -> term -> prop.
type coq-env-indt @kn -> bool -> int -> int -> term -> list @kn -> list term -> prop .

coq-env-indt @nat tt 0 0 @type Kn Kt :-
 Kn = [@nat0,@natS], map (x\ y\ sigma Ki\ coq-env-indc x 0 0 Ki y) Kn Kt.
coq-env-indc @nat0 0 0 0 (indt @nat).
coq-env-indc @natS 0 0 1 (prod (indt @nat) _\ indt @nat).

coq-env-indt @vect tt 1 1 (prod @type _\ prod (indt @nat) _\ @type) Kn Kt :-
 Kn = [@vectN,@vectC], map (x\ y\ sigma Ki\ coq-env-indc x 1 1 Ki y) Kn Kt.
coq-env-indc @vectN 1 1 0 (prod @type t\ app [indt @vect, t, indc @nat0]).
coq-env-indc @vectC 1 1 1 (prod @type t\ prod (indt @nat) n\
                      prod t x\ prod (app [indt @vect, t, n]) xs\
                       app [indt @vect, t, app [indc @natS,n]]).

macro @plus :- "Coq.Init.Peano.plus".
macro @append :- "Coq.Vectors.Vector.append".

coq-env-const @plus Ty Bo :-
  Ty = (prod (indt @nat) _\ prod (indt @nat) _\ (indt @nat)),
  Bo = (fix "f" 0 f\ lam "n" (indt @nat) n\ lam "m" (indt @nat) m\
           match n (lam "_" (indt @nat) _\ (indt @nat)) [
             m,
             lam "n1" (indt @nat) n1\app [indc @natS,app [f,n1,m]]
           ]).

coq-env-const @append Ty Bo :-
  Ty = (prod @type t\ prod (indt @nat) n1\ prod (indt @nat) n2\
           prod (app [indt @vect,t,n1]) _\
           prod (app [indt @vect,t,n2]) _\
             (app [indt @vect,t,app [const @plus,n1,n2]])),
  Bo = (lam "t" @type t\
          fix "f" 0 f\ lam "n1" (indt @nat) n1\ lam "n2" (indt @nat) n2\
                   lam "v1" (app [indt @vect,t,n1]) v1\
                   lam "v2" (app [indt @vect,t,n2]) v2\
                     match v1 (lam "i" (indt @nat) i\ 
                                lam "w" (app [indt @vect,t,i]) w\
                        (app [indt @vect,t,app[const @plus,i,n2]])) [
                       v2,
                       lam "m" (indt @nat) m\
                       lam "x" t x\
                       lam "v" (app [indt @vect,t,m]) v\
                         app [indc @vectC,t,
                           app[const @plus,m,n2], x, app[f,m,n2,v,v2]]
                     ]).

%%%% meta %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5

of (?? as K) X Y :- !, Y = K, $constraint (of K X Y) K.

of T Ty T1 :- $print "Ill typed: " T `: Ty "~>" T1, halt.

constraint of {
  
}

main :- test1, test2, test3.

test3 :-
  $print "\nChecking vector reversal",
  coq-env-const @append T B,
  of B T B1, $print {pp B1}.

test2 :-
  $print "\nChecking nat addition",
  coq-env-const @plus T B,
  of B T B1, $print {pp B1}.

test1 :-
  $print "\nBuild of match return predicate shape",
  of (match (app [indc @vectN, indt @nat]) _ _) _ M,
  $print {pp M}.

% vim:set ft=lprolog spelllang=:
